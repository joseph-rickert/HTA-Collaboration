---
title: "Solution to NMA 4 state asthma model"
author: Joseph Rickert
date: July 10, 2024
format: html
---

This document implents a `JAGS` model for the 4-state network meta-analysis model described in the book [Network Meta-Analysis for Decision-Making](https://www.agropustaka.id/wp-content/uploads/2020/04/agropustaka.id_buku_Network-Meta-Analysis-for-Decision-Making.pdf) by Sofia Dias, A.E. Ades, Nicky J. Welton, Jeroen P. Jansen, and Alexander J. Sutton.


![](4state.png)



The model relies on symbolic solutions to the Kolmogorov forward equations for the transition probabilities for the 4-state model which have previously been derived using the symbolic computations capabilities of the `Julia` language. The code contains some diagnostic features to check that the estimated process rates for each row of the generator matrix for the continuous-time chain sum to 0.




## Load and Prepare Data

```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: TRUE
#| code-summary: "Show the code"
library(rjags)
library(ggplot2)
library(coda)
library(dplyr)
library(tidyr)
```

## Define the JAGS Model

The ransition probabilities P[i,j] were derived from by symbolically solving the Kolmogorov forward equations using the Julia language and translated into R syntax which is understood by `JAGS`. The original very long Julia expressions were also broken down into smaller terms to make them more easily digestible by the `JAGS` compiler
```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: TRUE
#| code-summary: "Code for JAGS Model String"
model_string <- "
model {

# ---------- P[1,1] ----------
term0_11 <- 1
term1_11 <- -u * lambda12

term2a_11 <- u * u * lambda12 * lambda12
term2b_11 <- u * u * lambda12 * lambda21
term2_11  <- 0.5 * (term2a_11 + term2b_11)

term3a_11 <- -0.5 * u * (term2a_11 + term2b_11) * lambda12
term3b1_11 <- -u * u * lambda12 * lambda21
term3b2_11 <- u * u * (-lambda21 - lambda23 - lambda24) * lambda21
term3b_11 <- 0.5 * u * (term3b1_11 + term3b2_11) * lambda12
term3_11  <- (1/3) * (term3a_11 + term3b_11)

sub4a_11 <- 0.5 * u * u * u * lambda21 * lambda23 * lambda32
sub4b_11 <- 0.5 * u * (term2a_11 + term2b_11) * lambda21
sub4c_11 <- 0.5 * u * (term3b1_11 + term3b2_11) * (-lambda21 - lambda23 - lambda24)
inner4a_11 <- (1/3) * u * (sub4a_11 + sub4b_11 + sub4c_11) * lambda12

sub4d_11 <- -0.5 * u * (term2a_11 + term2b_11) * lambda12
sub4e_11 <- 0.5 * u * (term3b1_11 + term3b2_11) * lambda12
inner4b_11 <- -(1/3) * u * (sub4d_11 + sub4e_11) * lambda12

term4_11 <- (1/4) * (inner4a_11 + inner4b_11)

P[1,1] <- term0_11 + term1_11 + term2_11 + term3_11 + term4_11


# ---------- P[1,2] ----------
term1_12 <- u * lambda12

term2a_12 <- -u * u * lambda12 * lambda12
term2b_12 <- u * u * lambda12 * (-lambda21 - lambda23 - lambda24)
term2_12  <- 0.5 * (term2a_12 + term2b_12)

term3a_12 <- -0.5 * u * (term2a_12 + term2b_12) * lambda12
term3b_12 <- 0.5 * u * (
  u * u * lambda12 * lambda21 +
  u * u * (-lambda21 - lambda23 - lambda24) * (-lambda21 - lambda23 - lambda24) +
  u * u * lambda23 * lambda32
) * lambda12
term3_12 <- (1/3) * (term3a_12 + term3b_12)

sub4a_12 <- -0.5 * u * (term2a_12 + term2b_12) * lambda12
sub4b_12 <- 0.5 * u * (
  u * u * lambda12 * lambda21 +
  u * u * (-lambda21 - lambda23 - lambda24) * (-lambda21 - lambda23 - lambda24) +
  u * u * lambda23 * lambda32
) * lambda12
inner4a_12 <- -(1/3) * u * (sub4a_12 + sub4b_12) * lambda12

inner4b_12 <- (1/3) * u * (
  0.5 * u * (term2a_12 + term2b_12) * lambda21 +
  0.5 * u * (
    u * u * lambda12 * lambda21 +
    u * u * (-lambda21 - lambda23 - lambda24) * (-lambda21 - lambda23 - lambda24) +
    u * u * lambda23 * lambda32
  ) * (-lambda21 - lambda23 - lambda24) +
  0.5 * u * (
    u * u * (-lambda21 - lambda23 - lambda24) * lambda32 +
    u * u * lambda32 * (-lambda32 - lambda34)
  ) * lambda23
) * lambda12

term4_12 <- (1/4) * (inner4a_12 + inner4b_12)

P[1,2] <- term1_12 + term2_12 + term3_12 + term4_12


# ---------- P[1,3] ----------
term2_13 <- 0.5 * u * u * lambda12 * lambda23

term3a_13 <- -0.5 * u * u * u * lambda12 * lambda12 * lambda23
term3b_13 <- 0.5 * u * (
  u * u * (-lambda21 - lambda23 - lambda24) * lambda23 +
  u * u * lambda23 * (-lambda32 - lambda34)
) * lambda12
term3_13  <- (1/3) * (term3a_13 + term3b_13)

inner4a_13 <- -0.5 * u * (term3a_13 + term3b_13) * lambda12
inner4b_13 <- (1/3) * u * (
  0.5 * u * u * u * lambda12 * lambda21 * lambda23 +
  0.5 * u * (
    u * u * (-lambda21 - lambda23 - lambda24) * lambda23 +
    u * u * lambda23 * (-lambda32 - lambda34)
  ) * (-lambda21 - lambda23 - lambda24) +
  0.5 * u * (
    u * u * lambda23 * lambda32 +
    u * u * (-lambda32 - lambda34) * (-lambda32 - lambda34)
  ) * lambda23
) * lambda12

term4_13 <- (1/4) * (inner4a_13 + inner4b_13)

P[1,3] <- term2_13 + term3_13 + term4_13


# ---------- P[1,4] ----------
term2_14 <- 0.5 * u * u * lambda12 * lambda24

term3a_14 <- -0.5 * u * u * u * lambda12 * lambda12 * lambda24
term3b_14 <- 0.5 * u * (
  u * u * (-lambda21 - lambda23 - lambda24) * lambda24 +
  u * u * lambda23 * lambda34
) * lambda12
term3_14  <- (1/3) * (term3a_14 + term3b_14)

inner4a_14 <- -0.5 * u * (term3a_14 + term3b_14) * lambda12
inner4b_14 <- (1/3) * u * (
  0.5 * u * u * u * lambda12 * lambda21 * lambda24 +
  0.5 * u * (
    u * u * (-lambda21 - lambda23 - lambda24) * lambda24 +
    u * u * lambda23 * lambda34
  ) * (-lambda21 - lambda23 - lambda24) +
  0.5 * u * (
    u * u * lambda24 * lambda32 +
    u * u * (-lambda32 - lambda34) * lambda34
  ) * lambda23
) * lambda12

term4_14 <- (1/4) * (inner4a_14 + inner4b_14)

P[1,4] <- term2_14 + term3_14 + term4_14

# ---------- P[2,1] ----------
# First-order term
term1_21 <- u * lambda21

# Second-order
term2a_21 <- -u * u * lambda12 * lambda21
term2b_21 <- u * u * (-lambda21 - lambda23 - lambda24) * lambda21
term2_21 <- 0.5 * (term2a_21 + term2b_21)

# Third-order
term3a_21 <- 0.5 * u * u * u * lambda21 * lambda23 * lambda32
term3b_21 <- 0.5 * u * (u * u * lambda12 * lambda12 + u * u * lambda12 * lambda21) * lambda21
term3c_21 <- 0.5 * u * (-u * u * lambda12 * lambda21 + u * u * (-lambda21 - lambda23 - lambda24) * lambda21) * (-lambda21 - lambda23 - lambda24)
term3_21 <- (1/3) * (term3a_21 + term3b_21 + term3c_21)

# Fourth-order
inner4a_21 <- (1/3) * u * (term3a_21 + term3b_21 + term3c_21) * (-lambda21 - lambda23 - lambda24)
inner4b_21 <- (1/3) * u * (
  0.5 * u * u * u * lambda21 * lambda32 * (-lambda32 - lambda34) +
  0.5 * u * (-u * u * lambda12 * lambda21 + u * u * (-lambda21 - lambda23 - lambda24) * lambda21) * lambda32
) * lambda23
inner4c_21 <- (1/3) * u * (
  -0.5 * u * (u * u * lambda12 * lambda12 + u * u * lambda12 * lambda21) * lambda12 +
   0.5 * u * (-u * u * lambda12 * lambda21 + u * u * (-lambda21 - lambda23 - lambda24) * lambda21) * lambda12
) * lambda21
term4_21 <- (1/4) * (inner4a_21 + inner4b_21 + inner4c_21)

# Fifth-order
sub5a_21 <- (1/3) * u * (
  term3a_21 + term3b_21 + term3c_21
) * lambda12

sub5b_21 <- (1/3) * u * (
  -0.5 * u * (u * u * lambda12 * lambda12 + u * u * lambda12 * lambda21) * lambda12 +
   0.5 * u * (-u * u * lambda12 * lambda21 + u * u * (-lambda21 - lambda23 - lambda24) * lambda21) * lambda12
) * lambda12

inner5a_21 <- (1/4) * u * (sub5a_21 - sub5b_21) * lambda21

inner5b_21 <- (1/4) * u * (inner4a_21 + inner4b_21 + inner4c_21) * (-lambda21 - lambda23 - lambda24)

inner5c_21 <- (1/4) * u * (
  (1/3) * u * (term3a_21 + term3b_21 + term3c_21) * lambda32 +
  (1/3) * u * (
    0.5 * u * u * u * lambda21 * lambda32 * (-lambda32 - lambda34) +
    0.5 * u * (-u * u * lambda12 * lambda21 + u * u * (-lambda21 - lambda23 - lambda24) * lambda21) * lambda32
  ) * (-lambda32 - lambda34)
) * lambda23

term5_21 <- (1/5) * (inner5a_21 + inner5b_21 + inner5c_21)

P[2,1] <- term1_21 + term2_21 + term3_21 + term4_21 + term5_21

# ---------- P[2,2] ----------
term0_22 <- 1
term1_22 <- u * (-lambda21 - lambda23 - lambda24)

term2a_22 <- u * u * lambda12 * lambda21
term2b_22 <- u * u * (-lambda21 - lambda23 - lambda24) * (-lambda21 - lambda23 - lambda24)
term2c_22 <- u * u * lambda23 * lambda32
term2_22 <- 0.5 * (term2a_22 + term2b_22 + term2c_22)

term3a_22 <- 0.5 * u * (-u * u * lambda12 * lambda12 + u * u * lambda12 * (-lambda21 - lambda23 - lambda24)) * lambda21
term3b_22 <- 0.5 * u * (term2a_22 + term2b_22 + term2c_22) * (-lambda21 - lambda23 - lambda24)
term3c_22 <- 0.5 * u * (
  u * u * (-lambda21 - lambda23 - lambda24) * lambda32 +
  u * u * lambda32 * (-lambda32 - lambda34)
) * lambda23
term3_22 <- (1/3) * (term3a_22 + term3b_22 + term3c_22)

inner4a_22 <- (1/3) * u * (
  -0.5 * u * (-u * u * lambda12 * lambda12 + u * u * lambda12 * (-lambda21 - lambda23 - lambda24)) * lambda12 +
   0.5 * u * (term2a_22 + term2b_22 + term2c_22) * lambda12
) * lambda21

inner4b_22 <- (1/3) * u * (term3a_22 + term3b_22 + term3c_22) * (-lambda21 - lambda23 - lambda24)

inner4c_22 <- (1/3) * u * (
  0.5 * u * term2_22 * lambda32 +
  0.5 * u * (
    u * u * (-lambda21 - lambda23 - lambda24) * lambda32 +
    u * u * lambda32 * (-lambda32 - lambda34)
  ) * (-lambda32 - lambda34)
) * lambda23

term4_22 <- (1/4) * (inner4a_22 + inner4b_22 + inner4c_22)

term5a_22 <- (1/4) * u * (
  - (1/3) * u * (inner4a_22) * lambda12 +
    (1/3) * u * (term3a_22 + term3b_22 + term3c_22) * lambda12
) * lambda21

term5b_22 <- (1/4) * u * (inner4a_22 + inner4b_22 + inner4c_22) * (-lambda21 - lambda23 - lambda24)

term5c_22 <- (1/4) * u * (
  (1/3) * u * term3_22 * lambda32 +
  (1/3) * u * (
    term2_22 * lambda32 +
    (
      u * u * (-lambda21 - lambda23 - lambda24) * lambda32 +
      u * u * lambda32 * (-lambda32 - lambda34)
    ) * (-lambda32 - lambda34)
  )
) * lambda23

term5_22 <- (1/5) * (term5a_22 + term5b_22 + term5c_22)

P[2,2] <- term0_22 + term1_22 + term2_22 + term3_22 + term4_22 + term5_22

# ---------- P[2,3] ----------
term1_23 <- u * lambda23

term2a_23 <- u * u * (-lambda21 - lambda23 - lambda24) * lambda23
term2b_23 <- u * u * lambda23 * (-lambda32 - lambda34)
term2_23  <- 0.5 * (term2a_23 + term2b_23)

term3a_23 <- 0.5 * u * u * u * lambda12 * lambda21 * lambda23
term3b_23 <- 0.5 * u * (term2a_23 + term2b_23) * (-lambda21 - lambda23 - lambda24)
term3c_23 <- 0.5 * u * (
  u * u * lambda23 * lambda32 +
  u * u * (-lambda32 - lambda34) * (-lambda32 - lambda34)
) * lambda23
term3_23 <- (1/3) * (term3a_23 + term3b_23 + term3c_23)

inner4a_23 <- (1/3) * u * (
  -0.5 * u * u * u * lambda12 * lambda12 * lambda23 +
   0.5 * u * (term2a_23 + term2b_23) * lambda12
) * lambda21

inner4b_23 <- (1/3) * u * (term3a_23 + term3b_23 + term3c_23) * (-lambda21 - lambda23 - lambda24)

inner4c_23 <- (1/3) * u * (
  0.5 * u * (term2a_23 + term2b_23) * lambda32 +
  0.5 * u * (
    u * u * lambda23 * lambda32 +
    u * u * (-lambda32 - lambda34) * (-lambda32 - lambda34)
  ) * (-lambda32 - lambda34)
) * lambda23

term4_23 <- (1/4) * (inner4a_23 + inner4b_23 + inner4c_23)

term5a_23 <- (1/4) * u * (
  - (1/3) * u * (
    -0.5 * u * u * u * lambda12 * lambda12 * lambda23 +
    0.5 * u * (term2a_23 + term2b_23) * lambda12
  ) * lambda12 +
  (1/3) * u * (term3a_23 + term3b_23 + term3c_23) * lambda12
) * lambda21

term5b_23 <- (1/4) * u * (inner4a_23 + inner4b_23 + inner4c_23) * (-lambda21 - lambda23 - lambda24)

term5c_23 <- (1/4) * u * (
  (1/3) * u * term3_23 * lambda32 +
  (1/3) * u * (
    0.5 * u * (term2a_23 + term2b_23) * lambda32 +
    0.5 * u * (
      u * u * lambda23 * lambda32 +
      u * u * (-lambda32 - lambda34) * (-lambda32 - lambda34)
    ) * (-lambda32 - lambda34)
  )
) * lambda23

term5_23 <- (1/5) * (term5a_23 + term5b_23 + term5c_23)

P[2,3] <- term1_23 + term2_23 + term3_23 + term4_23 + term5_23

# ---------- P[2,4] ----------
# ---------- P[2,4] ----------

# First-order term
term1_24 <- u * lambda24

# Second-order terms
term2a_24 <- u * u * (-lambda21 - lambda23 - lambda24) * lambda24
term2b_24 <- u * u * lambda23 * lambda34
term2_24  <- 0.5 * (term2a_24 + term2b_24)

# Third-order terms
term3a_24 <- 0.5 * u * u * u * lambda12 * lambda21 * lambda24
term3b_24 <- 0.5 * u * (term2a_24 + term2b_24) * (-lambda21 - lambda23 - lambda24)
term3c_24 <- 0.5 * u * (
  u * u * lambda24 * lambda32 +
  u * u * (-lambda32 - lambda34) * lambda34
) * lambda23
term3_24 <- (1/3) * (term3a_24 + term3b_24 + term3c_24)

# Fourth-order terms
inner4a_24 <- (1/3) * u * (
  -0.5 * u * u * u * lambda12 * lambda12 * lambda24 +
   0.5 * u * (term2a_24 + term2b_24) * lambda12
) * lambda21

inner4b_24 <- (1/3) * u * (term3a_24 + term3b_24 + term3c_24) * (-lambda21 - lambda23 - lambda24)

inner4c_24 <- (1/3) * u * (
  0.5 * u * (term2a_24 + term2b_24) * lambda32 +
  0.5 * u * (
    u * u * lambda24 * lambda32 +
    u * u * (-lambda32 - lambda34) * lambda34
  ) * (-lambda32 - lambda34)
) * lambda23

term4_24 <- (1/4) * (inner4a_24 + inner4b_24 + inner4c_24)

# Fifth-order terms

term5a_24 <- (1/4) * u * (
  (1/3) * u * (
    -0.5 * u * u * u * lambda12 * lambda12 * lambda24 +
     0.5 * u * (term2a_24 + term2b_24) * lambda12
  ) * lambda12 +
  (1/3) * u * (term3a_24 + term3b_24 + term3c_24) * lambda12
) * lambda21

term5b_24 <- (1/4) * u * (inner4a_24 + inner4b_24 + inner4c_24) * (-lambda21 - lambda23 - lambda24)

term5c_24 <- (1/4) * u * (
  (1/3) * u * (term3a_24 + term3b_24 + term3c_24) * lambda32 +
  (1/3) * u * (
    0.5 * u * (term2a_24 + term2b_24) * lambda32 +
    0.5 * u * (
      u * u * lambda24 * lambda32 +
      u * u * (-lambda32 - lambda34) * lambda34
    ) * (-lambda32 - lambda34)
  )
) * lambda23

term5_24 <- (1/5) * (term5a_24 + term5b_24 + term5c_24)

# Final assignment
P[2,4] <- term1_24 + term2_24 + term3_24 + term4_24 + term5_24

# ---------- P[3,1] ----------

# Second-order term
term2_31 <- 0.5 * u * u * lambda21 * lambda32

# Third-order terms
term3a_31 <- 0.5 * u * u * u * lambda21 * lambda32 * (-lambda32 - lambda34)
term3b_31 <- 0.5 * u * (
  -u * u * lambda12 * lambda21 + u * u * (-lambda21 - lambda23 - lambda24) * lambda21
) * lambda32
term3_31  <- (1/3) * (term3a_31 + term3b_31)

# Fourth-order terms
sub4a1_31 <- 0.5 * u * u * u * lambda21 * lambda23 * lambda32
sub4a2_31 <- 0.5 * u * (u * u * lambda12 * lambda12 + u * u * lambda12 * lambda21) * lambda21
sub4a3_31 <- 0.5 * u * (
  -u * u * lambda12 * lambda21 + u * u * (-lambda21 - lambda23 - lambda24) * lambda21
) * (-lambda21 - lambda23 - lambda24)
inner4a_31 <- (1/3) * u * (sub4a1_31 + sub4a2_31 + sub4a3_31) * lambda32

sub4b1_31 <- term3a_31
sub4b2_31 <- term3b_31
inner4b_31 <- (1/3) * u * (sub4b1_31 + sub4b2_31) * (-lambda32 - lambda34)

term4_31 <- (1/4) * (inner4a_31 + inner4b_31)

# Fifth-order terms

## Branch A
inner5a_31 <- (1/3) * u * (sub4a1_31 + sub4a2_31 + sub4a3_31) * (-lambda21 - lambda23 - lambda24)
inner5b_31 <- (1/3) * u * (sub4b1_31 + sub4b2_31) * lambda23

sub5a3a_31 <- -0.5 * u * (u * u * lambda12 * lambda12 + u * u * lambda12 * lambda21) * lambda12
sub5a3b_31 <- 0.5 * u * (
  -u * u * lambda12 * lambda21 + u * u * (-lambda21 - lambda23 - lambda24) * lambda21
) * lambda12
inner5c_31 <- (1/3) * u * (sub5a3a_31 + sub5a3b_31) * lambda21

branchA_31 <- (1/4) * u * (inner5a_31 + inner5b_31 + inner5c_31) * lambda32

## Branch B
inner5d_31 <- (1/3) * u * (sub4a1_31 + sub4a2_31 + sub4a3_31) * lambda32
inner5e_31 <- (1/3) * u * (sub4b1_31 + sub4b2_31) * (-lambda32 - lambda34)
branchB_31 <- (1/4) * u * (inner5d_31 + inner5e_31) * (-lambda32 - lambda34)

term5_31 <- (1/5) * (branchA_31 + branchB_31)

P[3,1] <- term2_31 + term3_31 + term4_31 + term5_31

# ---------- P[3,2] ----------

# First-order term
term1_32 <- u * lambda32

# Second-order terms
term2a_32 <- u * u * (-lambda21 - lambda23 - lambda24) * lambda32
term2b_32 <- u * u * lambda32 * (-lambda32 - lambda34)
term2_32  <- 0.5 * (term2a_32 + term2b_32)

# Third-order terms
term3a_32 <- 0.5 * u * (
  u * u * lambda12 * lambda21 +
  u * u * (-lambda21 - lambda23 - lambda24) * (-lambda21 - lambda23 - lambda24) +
  u * u * lambda23 * lambda32
) * lambda32

term3b_32 <- 0.5 * u * (term2a_32 + term2b_32) * (-lambda32 - lambda34)

term3_32 <- (1/3) * (term3a_32 + term3b_32)

# Fourth-order terms
sub4a1_32 <- 0.5 * u * (
  -u * u * lambda12 * lambda12 +
  u * u * lambda12 * (-lambda21 - lambda23 - lambda24)
) * lambda21

sub4a2_32 <- term3a_32
sub4a3_32 <- term2a_32 + term2b_32

inner4a_32 <- (1/3) * u * (
  sub4a1_32 + sub4a2_32 + 0.5 * u * sub4a3_32 * lambda23
) * lambda32

inner4b_32 <- (1/3) * u * (term3a_32 + term3b_32) * (-lambda32 - lambda34)

term4_32 <- (1/4) * (inner4a_32 + inner4b_32)

# Fifth-order terms

## Branch A
sub5a1_32 <- -0.5 * u * (
  -u * u * lambda12 * lambda12 +
  u * u * lambda12 * (-lambda21 - lambda23 - lambda24)
) * lambda12

sub5a2_32 <- term3a_32
inner5a_32 <- (1/3) * u * (sub5a1_32 + sub5a2_32) * lambda21

inner5b_32 <- (1/3) * u * (
  sub5a1_32 * lambda21 +
  term3a_32 * (-lambda21 - lambda23 - lambda24) +
  0.5 * u * sub4a3_32 * lambda23
) * (-lambda21 - lambda23 - lambda24)

inner5c_32 <- (1/3) * u * (term3a_32 + term3b_32) * lambda23

branchA_32 <- (1/4) * u * (inner5a_32 + inner5b_32 + inner5c_32) * lambda32

## Branch B
inner5d_32 <- (1/3) * u * (
  sub5a1_32 * lambda21 +
  term3a_32 * (-lambda21 - lambda23 - lambda24) +
  0.5 * u * sub4a3_32 * lambda23
) * lambda32

inner5e_32 <- (1/3) * u * (term3a_32 + term3b_32) * (-lambda32 - lambda34)

branchB_32 <- (1/4) * u * (inner5d_32 + inner5e_32) * (-lambda32 - lambda34)

term5_32 <- (1/5) * (branchA_32 + branchB_32)

P[3,2] <- term1_32 + term2_32 + term3_32 + term4_32 + term5_32


# ---------- P[3,3] ----------

# Zeroth-order term
term0_33 <- 1

# First-order term
term1_33 <- u * (-lambda32 - lambda34)

# Second-order terms
term2a_33 <- u * u * lambda23 * lambda32
term2b_33 <- u * u * (-lambda32 - lambda34) * (-lambda32 - lambda34)
term2_33  <- 0.5 * (term2a_33 + term2b_33)

# Third-order terms
term3a_33 <- 0.5 * u * (
  u * u * (-lambda21 - lambda23 - lambda24) * lambda23 +
  u * u * lambda23 * (-lambda32 - lambda34)
) * lambda32

term3b_33 <- 0.5 * u * (term2a_33 + term2b_33) * (-lambda32 - lambda34)

term3_33 <- (1/3) * (term3a_33 + term3b_33)

# Fourth-order terms
inner4a_33 <- (1/3) * u * (
  0.5 * u * u * u * lambda12 * lambda21 * lambda23 +
  0.5 * u * (
    u * u * (-lambda21 - lambda23 - lambda24) * lambda23 +
    u * u * lambda23 * (-lambda32 - lambda34)
  ) * (-lambda21 - lambda23 - lambda24) +
  0.5 * u * (
    u * u * lambda23 * lambda32 +
    u * u * (-lambda32 - lambda34) * (-lambda32 - lambda34)
  ) * lambda23
) * lambda32

inner4b_33 <- (1/3) * u * (
  0.5 * u * (
    u * u * (-lambda21 - lambda23 - lambda24) * lambda23 +
    u * u * lambda23 * (-lambda32 - lambda34)
  ) * lambda32 +
  0.5 * u * (term2a_33 + term2b_33) * (-lambda32 - lambda34)
) * (-lambda32 - lambda34)

term4_33 <- (1/4) * (inner4a_33 + inner4b_33)

# Fifth-order terms
term5a_33 <- (1/4) * u * (
  (1/3) * u * (
    -0.5 * u * u * u * lambda12 * lambda12 * lambda23 +
     0.5 * u * (
       u * u * (-lambda21 - lambda23 - lambda24) * lambda23 +
       u * u * lambda23 * (-lambda32 - lambda34)
     ) * lambda12
  ) * lambda21 +
  (1/3) * u * inner4a_33 * (-lambda21 - lambda23 - lambda24) +
  (1/3) * u * (
    0.5 * u * (
      u * u * (-lambda21 - lambda23 - lambda24) * lambda23 +
      u * u * lambda23 * (-lambda32 - lambda34)
    ) * lambda32 +
    0.5 * u * (term2a_33 + term2b_33) * (-lambda32 - lambda34)
  ) * lambda23
) * lambda32

term5b_33 <- (1/4) * u * (
  inner4a_33 +
  inner4b_33
) * (-lambda32 - lambda34)

term5_33 <- (1/5) * (term5a_33 + term5b_33)

P[3,3] <- term0_33 + term1_33 + term2_33 + term3_33 + term4_33 + term5_33

# ---------- P[3,4] ----------

# First-order term
term1_34 <- u * lambda34

# Second-order terms
term2a_34 <- u * u * lambda24 * lambda32
term2b_34 <- u * u * (-lambda32 - lambda34) * lambda34
term2_34  <- 0.5 * (term2a_34 + term2b_34)

# Third-order terms
term3a_34 <- 0.5 * u * (
  u * u * (-lambda21 - lambda23 - lambda24) * lambda24 +
  u * u * lambda23 * lambda34
) * lambda32

term3b_34 <- 0.5 * u * (term2a_34 + term2b_34) * (-lambda32 - lambda34)

term3_34 <- (1/3) * (term3a_34 + term3b_34)

# Fourth-order terms
inner4a_34 <- (1/3) * u * (
  0.5 * u * u * u * lambda12 * lambda21 * lambda24 +
  0.5 * u * (
    u * u * (-lambda21 - lambda23 - lambda24) * lambda24 +
    u * u * lambda23 * lambda34
  ) * (-lambda21 - lambda23 - lambda24) +
  0.5 * u * (
    u * u * lambda24 * lambda32 +
    u * u * (-lambda32 - lambda34) * lambda34
  ) * lambda23
) * lambda32

inner4b_34 <- (1/3) * u * (
  0.5 * u * (
    u * u * (-lambda21 - lambda23 - lambda24) * lambda24 +
    u * u * lambda23 * lambda34
  ) * lambda32 +
  0.5 * u * (term2a_34 + term2b_34) * (-lambda32 - lambda34)
) * (-lambda32 - lambda34)

term4_34 <- (1/4) * (inner4a_34 + inner4b_34)

# Fifth-order terms
term5a_34 <- (1/4) * u * (
  (1/3) * u * (
    -0.5 * u * u * u * lambda12 * lambda12 * lambda24 +
     0.5 * u * (
       u * u * (-lambda21 - lambda23 - lambda24) * lambda24 +
       u * u * lambda23 * lambda34
     ) * lambda12
  ) * lambda21 +
  (1/3) * u * inner4a_34 * (-lambda21 - lambda23 - lambda24) +
  (1/3) * u * (
    0.5 * u * (
      u * u * (-lambda21 - lambda23 - lambda24) * lambda24 +
      u * u * lambda23 * lambda34
    ) * lambda32 +
    0.5 * u * (
      u * u * lambda24 * lambda32 +
      u * u * (-lambda32 - lambda34) * lambda34
    ) * (-lambda32 - lambda34)
  ) * lambda23
) * lambda32

term5b_34 <- (1/4) * u * (
  inner4a_34 +
  inner4b_34
) * (-lambda32 - lambda34)

term5_34 <- (1/5) * (term5a_34 + term5b_34)

P[3,4] <- term1_34 + term2_34 + term3_34 + term4_34 + term5_34

# ---------- P[4,j] ---------- 
P[4,1] <- 0
P[4,2] <- 0
P[4,3] <- 0
P[4,4] <- 1



# Normalized transition probabilities are used to stabilize the model
# If p[1,j] is exactly 0 or NA due to symbolic math breakdowns 
# (e.g., division by row2_sum = 0), the likelihood becomes invalid
# triggering that dreaded “Invalid parent values” error.
# max(max(...), ε) acts like a soft-clipping threshold to guarantee numerical safety.

# ---------- p[1,j] ---------- 

row1_sum <- P[1,1] + P[1,2] + P[1,3] + P[1,4]

p[1,1] <- max(max(P[1,1] / row1_sum, 0), 0.000001)
p[1,2] <- max(max(P[1,2] / row1_sum, 0), 0.000001)
p[1,3] <- max(max(P[1,3] / row1_sum, 0), 0.000001)
p[1,4] <- max(max(P[1,4] / row1_sum, 0), 0.000001)

r[1,1:4] ~ dmulti(p[1,1:4], n[1])


# ---------- p[2,j] ---------- 

row2_sum <- P[2,1] + P[2,2] + P[2,3] + P[2,4]

p[2,1] <- max(max(P[2,1] / row2_sum, 0), 0.000001)
p[2,2] <- max(max(P[2,2] / row2_sum, 0), 0.000001)
p[2,3] <- max(max(P[2,3] / row2_sum, 0), 0.000001)
p[2,4] <- max(max(P[2,4] / row2_sum, 0), 0.000001)

r[2,1:4] ~ dmulti(p[2,1:4], n[2])

# ---------- p[3,j] ---------- 
 
row3_sum <- P[3,1] + P[3,2] + P[3,3] + P[3,4]


p[3,1] <- max(max(P[3,1] / row3_sum, 0), 0.000001)
p[3,2] <- max(max(P[3,2] / row3_sum, 0), 0.000001)
p[3,3] <- max(max(P[3,3] / row3_sum, 0), 0.000001)
p[3,4] <- max(max(P[3,4] / row3_sum, 0), 0.000001)

r[3,1:4] ~ dmulti(p[3,1:4], n[3])


# ---------- p[4,j] ---------- 

for (j in 1:4) {
  p[4,j] <- P[4,j]
 }
 r[4,1:4] ~ dmulti(p[4,1:4], n[4])


# Priors for transition rates

# Priors for state 1

lambda12 ~ dgamma(0.1, 0.1)
lambda13 ~ dgamma(0.1, 0.1)
lambda14 ~ dgamma(0.1, 0.1)

lambda11 <- -(lambda12 + lambda13 + lambda14)

# Priors from state 2
lambda21 ~ dgamma(0.1, 0.1)
lambda23 ~ dgamma(0.1, 0.1)
lambda24 ~ dgamma(0.1, 0.1)

lambda22 <- -(lambda21 + lambda23 + lambda24)

# Priors for state 3 

lambda31 ~ dgamma(0.1, 0.1)
lambda32 ~ dgamma(0.1, 0.1)
lambda34 ~ dgamma(0.1, 0.1)

lambda33 <- -(lambda31 + lambda32 + lambda34)


# Priors for state 4
lambda41 ~ dgamma(0.1, 0.1)
lambda42 ~ dgamma(0.1, 0.1)
lambda43 ~ dgamma(0.1, 0.1)


}
"
writeLines(model_string, "4state_7_10.bug")
```

## Run the JAGS Model


```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: TRUE
#| code-summary: "Show the code"
#| 
# Initialize model

r <- matrix(c(310,70,2,0,
                   96, 1683, 11, 13,
                   1, 11, 1, 0,
                   0, 0, 0, 94), nrow=4, byrow=TRUE)

n <- rowSums(r)


data_list <- list(
  r = r,
  n = n,
  u = 1)


 inits <- list(lambda11 = 0,
               lambda12 = 0.1,
               lambda13 = 0.1,
               lambda14 = 0.1,
               lambda21 = 0.1, 
               lambda22 = 0,
               lambda23 = 0.1, 
               lambda24 = 0.1, 
               lambda31 = 0.1,
               lambda32 = 0.1,
               lambda33 = 0,
               lambda34 = 0.1,
               lambda41 = 0,
               lambda42 = 0,
               lambda43 = 0,
               lambda44 = 0)




parameters.to.save = c("lambda11", "lambda12", "lambda13", "lambda14", 
                       "lambda21", "lambda22","lambda23", "lambda24", 
                       "lambda31", "lambda32", "lambda33", "lambda34", 
                       "lambda41", "lambda42", "lambda43", "lambda44",
                       "P[1,1]", "P[1,2]", "P[1,3]", "P[1,4]",
                       "P[2,1]", "P[2,2]", "P[2,3]", "P[2,4]",
                       "P[3,1]", "P[3,2]", "P[3,3]", "P[3,4]",
                       "P[4,1]", "P[4,2]", "P[4,3]", "P[4,4]",
                       "p[1,1]", "p[1,2]", "p[1,3]", "p[1,4]",
                       "p[2,1]", "p[2,2]", "p[2,3]", "p[2,4]",
                       "p[3,1]", "p[3,2]", "p[3,3]", "p[3,4]",
                       "p[4,1]", "p[4,2]", "p[4,3]", "p[4,4]"
                       )

jags_model_7_10 <- jags.model(file = "4state_7_10.bug",
                         data = data_list,
                         n.chains = 3,
                         n.adapt = 100)
                         

# Burn-in
update(jags_model_7_10, 10000) #Discard these samples
``` 


## Fetch the Samples

This code uses the `coda.samples` function to draw samples from the JAGS model. The number of iterations is set to 5000, which can be adjusted based on convergence diagnostics and model complexity.
```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: TRUE
#| code-summary: "Show the code"


samples <- coda.samples(jags_model_78,
  variable.names = c(
    "lambda11", "lambda12", "lambda13", "lambda14", 
    "lambda21", "lambda22","lambda23", "lambda24", 
    "lambda31", "lambda32", "lambda33", "lambda34", 
    "lambda41", "lambda42", "lambda43", "lambda44",
    "P[1,1]", "P[1,2]", "P[1,3]", "P[1,4]", # cap P are the transition probabilities
    "P[2,1]", "P[2,2]", "P[2,3]", "P[2,4]",
    "P[3,1]", "P[3,2]", "P[3,3]", "P[3,4]",
    "P[4,1]", "P[4,2]", "P[4,3]", "P[4,4]",
    "p[1,1]", "p[1,2]", "p[1,3]", "p[1,4]", # small p are the normalized transition
    "p[2,1]", "p[2,2]", "p[2,3]", "p[2,4]", # probabilities use to stabilize the model
    "p[3,1]", "p[3,2]", "p[3,3]", "p[3,4]",
    "p[4,1]", "p[4,2]", "p[4,3]", "p[4,4]"
  ),
  n.iter = 50000,
  n.thin = 10
)


```

This code constructs, P, the matrix of transition probabilities. Prints out P and the row sums of P. Since P is a stochastic matrix, the row sums should be 1.
```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: true
#| code-summary: "Show the code"
smry <- summary(samples)
smry_df <- as.data.frame(smry[1])
names(smry_df) <- c("Mean", "SD", "Naive_SE", "Time_Series_SE")
P_rows <- smry_df[grep("^P\\[", rownames(smry_df)), ]

P <- matrix(P_rows[,1], nrow = 4, ncol = 4, byrow = TRUE)
P
rowsum_P <- rowSums(P)
rowsum_P
```

This code constructs the Generator matrix for the Markov, which contains the process rates, lambda. Rows of the generator matrix should sum to 0.

```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: true
#| code-summary: "Show the code"

Lambda_rows <- smry_df[grep("^lambda", rownames(smry_df)), ]

Lambda <- matrix(Lambda_rows[,1], nrow = 4, ncol = 4, byrow = TRUE)
Lambda
cat("\n row sums:")
rowsum_Lambda <- rowSums(Lambda)
rowsum_Lambda
```

This code constructs the matrix p of normalized transition probabilities matrix. These were computed by `JAGS` as a check on the stabiliy of the model. P and p should agree fairly closely.

```{r}
#| message: FALSE
#| warning: FALSE
#| eval: FALSE
#| code-fold: true
#| code-summary: "Show the code"

p_rows <- smry_df[grep("^p\\[", rownames(smry_df)), ]
p <- matrix(P_rows[,1], nrow = 4, ncol = 4, byrow = TRUE)
p
rowsum_p <- rowSums(p)
rowsum_p
```


This code sets up for plotting MCMC diagnostics. 
```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: true
#| code-summary: "Show the code"
# Convert JAGS samples to a data frame
samples_df <- as.data.frame(as.mcmc(do.call(rbind, samples)))


# Optional: print a few raw samples
cat("\n Transition Probabilities:\n")
round(head(samples_df[,1:16]),3)

cat("\n Process Rates:\n")
round(head(samples_df[,17:31]),3)
```


## Plots of MCMC Traces.
```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: TRUE
#| code-summary: "Show the code"
# Convert mcmc.list to data frame and add chain + iteration info
df_long <- do.call(rbind, lapply(1:length(samples), function(chain) {
  as.data.frame(samples[[chain]]) %>%
    mutate(
      iteration = row_number(),
      chain = factor(chain)
    )
})) %>%
  pivot_longer(cols = -c(iteration, chain), 
               names_to = "parameter", 
               values_to = "value")

```


### Trace Plots
```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: TRUE
#| code-summary: "Show the code"
ggplot(df_long %>% filter(parameter %in% c("P{1,1]", "P[1,2]", "P[1,3]", "P[1,4]", 
                                           "P[2,1]", "P[2,2]", "P[2,3]", "P[2,4]", 
                                           "P[3,1]", "P[3,2]", "P[3,3]", "P[3,4]")), 
       aes(x = iteration, y = value, color = parameter)) +
  geom_line(alpha = 0.6) +
  facet_wrap(~parameter, scales = "free_y") +
  labs(title = "Trace Plots", x = "Iteration", y = "Parameter Value") +
  theme_minimal()
```



### Plot Posterior distributions.
```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: true
#| code-summary: "Show the code"
ggplot(df_long %>% filter(parameter %in% c("P{1,1]", "P[1,2]", "P[1,3]", "P[1,4]", 
                                           "P[2,1]", "P[2,2]", "P[2,3]", "P[2,4]", 
                                           "P[3,1]", "P[3,2]", "P[3,3]", "P[3,4]")), 
       aes(x = value, fill = parameter)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~parameter, scales = "free") +
  labs(title = "Posterior Densities", x = "Value", y = "Density") +
  theme_minimal()

```
## JAGS Parameters

* The `n.iter` parameter specifies the total number of iterations to run, including both adaptation and burn-in phases.

* The `n.adapt` parameter specifies the number of iterations to use for the adaptation phase. This is an initial sampling phase during which the sampler adapts its behavior to maximize its efficiency (e.g. a Metropolis-Hastings random walk algorithm may change its step size). The sequence of samples generated during this adaptive phase is not a Markov chain, and therefore may not be used for posterior inference on the model.

* `update()` function to discard samples before the main sampling phase. This provides manual control before sampling. `Rjags()` does not use `update()`. Insteadit uses the `n.burnin` parameter to discard the first `n.burnin` samples during the sampling process.

* `n.thin` specifies the thinning interval. This means that every `n.thin`-th sample will be kept, while the others will be discarded. This is useful for reducing autocorrelation in the samples and managing memory usage.

## Model Logic

### Conceptual Linkage: From Parameters to Data

How does `JAGS`jags associates the parameters lambda11, lambda12, etc. with the data matrix r?

The lambda parameters (lambda12, lambda21, etc.) define the transition rate between states in the continuous-time Markov Chain (CTMC). These rates are plugged into the symbolic expressions to compute transition probabilities over a fixed time u, yielding P[i,j](u).

JAGS uses those probabilities to model the observed counts in r via a multinomial likelihood: 
r[i, 1:4] ~ dmulti(P[i, 1:4], n[i]). So essentially, each observed row r[i, ] represents the outcome of multinomial sampling, where each probability P[i,j](u) is indirectly shaped by the corresponding lambda_ij.

#### Internal Mechanics of Association in JAGS
Let’s break down what JAGS sees under the hood:

|Component|	|Role in Linking Data to Parameters|
------------------------------------------------------
|lambda_ij |	Model parameters sampled from priors (e.g., dgamma)|
|Symbolic expressions |	Use lambda_ij and u to compute P[i,j]|
|P[i,j] | Probabilities for transitioning from state i to j|
|r[i,1:4] |	Observed counts used in the likelihood|
|n[i]	|Total transitions from state i (sum of r[i,])|

`JAGS` makes this linkage: → lambda_ij → used in computing P[i,j](u) → used in dmulti(P[i, ], n[i]) → compared against r[i, ] during inference. During sampling, JAGS tweaks the values of lambda_ij to make the resulting P[i,j] better match the observed data r.


### How does rjags estimates P[i,j] indirectly via p[i,j]

Row Normalization: The model computes row_sum[i] <- sum(P[i,1:4]) and normalizes i.e:p[i,j] <- max(P[i,j] / row_sum[i], 0.000001) These p[i,j] values are guaranteed to be non-negative and sum close to one, making them valid inputs for the dmulti(...) likelihood.

Likelihood Inference: JAGS uses the observed data r[i,] and total n[i] to shape the posterior: r[i,1:4] ~ dmulti(p[i,1:4], n[i]). Now here's the key: JAGS samples values of lambda_ij to maximize the likelihood that the observed counts r[i,j] would result from the multinomial defined by p[i,j].

Backpropagation: Every sampled lambda_ij set passes through the symbolic expressions to recompute P[i,j], which are then normalized to p[i,j]. So while the likelihood is computed on p, it implicitly constrains lambda_ij and P[i,j] to values that make p match the observed data well.

This strategy works well because the symbolic expressions are smooth and deterministic filtering out instability (via max(..., 0.000001)). The posterior for lambda_ij is shaped to yield P[i,j] expressions that produce plausible multinomial distributions.

The estimation of P[i,j] is not direct. It is embedded inside the computational graph that links lambda_ij → P[i,j] → p[i,j] → likelihood.
