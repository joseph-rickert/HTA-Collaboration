---
title: "Solution to NMA 4 state asthma model"
author: Joseph Rickert
date: July 11, 2024
format: html
---

This document implents a `JAGS` model for the 4-state network meta-analysis model described in the book [Network Meta-Analysis for Decision-Making](https://www.agropustaka.id/wp-content/uploads/2020/04/agropustaka.id_buku_Network-Meta-Analysis-for-Decision-Making.pdf) by Sofia Dias, A.E. Ades, Nicky J. Welton, Jeroen P. Jansen, and Alexander J. Sutton.


![](4state.png)



The model relies on symbolic solutions to the Kolmogorov forward equations for the transition probabilities for the 4-state model which have previously been derived using the symbolic computations capabilities of the `Julia` language. The code contains some diagnostic features to check that the estimated process rates for each row of the generator matrix for the continuous-time chain sum to 0.




## Load and Prepare Data

```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: TRUE
#| code-summary: "Show the code"
library(rjags)
library(ggplot2)
library(coda)
library(dplyr)
library(tidyr)
```

## Define the JAGS Model

The ransition probabilities P[i,j] were derived from by symbolically solving the Kolmogorov forward equations using the Julia language and translated into R syntax which is understood by `JAGS`. The original very long Julia expressions were also broken down into smaller terms to make them more easily digestible by the `JAGS` compiler
```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: TRUE
#| code-summary: "Code for JAGS Model String"
model_string <- "
model {

P11_0 = 1
P11_1 = -u * q12
P11_2 = u^2 * (
  (1/2)*q12^2 + (1/2)*q12*q21
)
P11_3 = -u^3 * (
  (1/6)*q12^3 + (1/3)*q12^2*q21 + (1/6)*q12*q21^2 +
  (1/6)*q12*q21*q23 + (1/6)*q12*q21*q24
)
P11_4 = u^4 * (
  (1/24)*q12^4 + (1/8)*q12^3*q21 + (1/8)*q12^2*q21^2 +
  (1/12)*q12^2*q21*q23 + (1/12)*q12^2*q21*q24 +
  (1/24)*q12*q21^3 + (1/12)*q12*q21^2*q23 + (1/12)*q12*q21^2*q24 +
  (1/24)*q12*q21*q23^2 + (1/12)*q12*q21*q23*q24 +
  (1/24)*q12*q21*q23*q32 + (1/24)*q12*q21*q24^2
)
P11_5 = -u^5 * (
  (1/120)*q12^5 + (1/30)*q12^4*q21 + (1/20)*q12^3*q21^2 +
  (1/40)*q12^3*q21*q23 + (1/40)*q12^3*q21*q24 +
  (1/30)*q12^2*q21^3 + (1/20)*q12^2*q21^2*q23 + (1/20)*q12^2*q21^2*q24 +
  (1/60)*q12^2*q21*q23^2 + (1/30)*q12^2*q21*q23*q24 +
  (1/60)*q12^2*q21*q23*q32 + (1/60)*q12^2*q21*q24^2 +
  (1/120)*q12*q21^4 + (1/40)*q12*q21^3*q23 + (1/40)*q12*q21^3*q24 +
  (1/40)*q12*q21^2*q23^2 + (1/20)*q12*q21^2*q23*q24 +
  (1/60)*q12*q21^2*q23*q32 + (1/40)*q12*q21^2*q24^2 +
  (1/120)*q12*q21*q23^3 + (1/40)*q12*q21*q23^2*q24 +
  (1/60)*q12*q21*q23^2*q32 + (1/40)*q12*q21*q23*q24^2 +
  (1/60)*q12*q21*q23*q24*q32 + (1/120)*q12*q21*q23*q32^2 +
  (1/120)*q12*q21*q23*q32*q34 + (1/120)*q12*q21*q24^3
)
P[1,1] = P11_0 + P11_1 + P11_2 + P11_3 + P11_4 + P11_5



P12_1 = u * q12
P12_2 = -u^2 * (
  (1/2)*q12^2 + (1/2)*q12*q21 + (1/2)*q12*q23 + (1/2)*q12*q24
)
P12_3 = u^3 * (
  (1/6)*q12^3 + (1/3)*q12^2*q21 + (1/6)*q12^2*q23 + (1/6)*q12^2*q24 +
  (1/6)*q12*q21^2 + (1/3)*q12*q21*q23 + (1/3)*q12*q21*q24 +
  (1/6)*q12*q23^2 + (1/3)*q12*q23*q24 + (1/6)*q12*q23*q32 +
  (1/6)*q12*q24^2
)
P12_4 = -u^4 * (
  (1/24)*q12^4 + (1/8)*q12^3*q21 + (1/24)*q12^3*q23 + (1/24)*q12^3*q24 +
  (1/8)*q12^2*q21^2 + (1/6)*q12^2*q21*q23 + (1/6)*q12^2*q21*q24 +
  (1/24)*q12^2*q23^2 + (1/12)*q12^2*q23*q24 + (1/24)*q12^2*q23*q32 +
  (1/24)*q12^2*q24^2 + (1/24)*q12*q21^3 + (1/8)*q12*q21^2*q23 +
  (1/8)*q12*q21^2*q24 + (1/8)*q12*q21*q23^2 +
  (1/4)*q12*q21*q23*q24 + (1/12)*q12*q21*q23*q32 +
  (1/8)*q12*q21*q24^2 + (1/24)*q12*q23^3 + (1/8)*q12*q23^2*q24 +
  (1/12)*q12*q23^2*q32 + (1/8)*q12*q23*q24^2 +
  (1/12)*q12*q23*q24*q32 + (1/24)*q12*q23*q32^2 +
  (1/24)*q12*q23*q32*q34 + (1/24)*q12*q24^3
)
P12_5 = u^5 * (
  (1/120)*q12^5 + (1/30)*q12^4*q21 + (1/120)*q12^4*q23 +
  (1/120)*q12^4*q24 + (1/20)*q12^3*q21^2 + (1/20)*q12^3*q21*q23 +
  (1/20)*q12^3*q21*q24 + (1/120)*q12^3*q23^2 + (1/60)*q12^3*q23*q24 +
  (1/120)*q12^3*q23*q32 + (1/120)*q12^3*q24^2 + (1/30)*q12^2*q21^3 +
  (3/40)*q12^2*q21^2*q23 + (3/40)*q12^2*q21^2*q24 +
  (1/20)*q12^2*q21*q23^2 + (1/10)*q12^2*q21*q23*q24 +
  (1/30)*q12^2*q21*q23*q32 + (1/20)*q12^2*q21*q24^2 +
  (1/120)*q12^2*q23^3 + (1/40)*q12^2*q23^2*q24 +
  (1/60)*q12^2*q23^2*q32 + (1/40)*q12^2*q23*q24^2 +
  (1/60)*q12^2*q23*q24*q32 + (1/120)*q12^2*q23*q32^2 +
  (1/120)*q12^2*q23*q32*q34 + (1/120)*q12^2*q24^3 +
  (1/120)*q12*q21^4 + (1/30)*q12*q21^3*q23 + (1/30)*q12*q21^3*q24 +
  (1/20)*q12*q21^2*q23^2 + (1/10)*q12*q21^2*q23*q24 +
  (1/40)*q12*q21^2*q23*q32 + (1/20)*q12*q21^2*q24^2 +
  (1/30)*q12*q21*q23^3 + (1/10)*q12*q21*q23^2*q24 +
  (1/20)*q12*q21*q23^2*q32 + (1/10)*q12*q21*q23*q24^2 +
  (1/20)*q12*q21*q23*q24*q32 + (1/60)*q12*q21*q23*q32^2 +
  (1/60)*q12*q21*q23*q32*q34 + (1/30)*q12*q21*q24^3 +
  (1/120)*q12*q23^4 + (1/30)*q12*q23^3*q24 + (1/40)*q12*q23^3*q32 +
  (1/20)*q12*q23^2*q24^2 + (1/20)*q12*q23^2*q24*q32 +
  (1/40)*q12*q23^2*q32^2 + (1/60)*q12*q23^2*q32*q34 +
  (1/30)*q12*q23*q24^3 + (1/40)*q12*q23*q24^2*q32 +
  (1/60)*q12*q23*q24*q32^2 + (1/60)*q12*q23*q24*q32*q34 +
  (1/120)*q12*q23*q32^3 + (1/60)*q12*q23*q32^2*q34 +
  (1/120)*q12*q23*q32*q34^2 + (1/120)*q12*q24^4
)
P[1,2] = P12_1 + P12_2 + P12_3 + P12_4 + P12_5

P13_2 = (1/2) * u^2 * q12 * q23
P13_3 = -u^3 * (
  (1/6)*q12^2*q23 + (1/6)*q12*q21*q23 + (1/6)*q12*q23^2 +
  (1/6)*q12*q23*q24 + (1/6)*q12*q23*q32 + (1/6)*q12*q23*q34
)
P13_4 = u^4 * (
  (1/24)*q12^3*q23 + (1/12)*q12^2*q21*q23 + (1/24)*q12^2*q23^2 +
  (1/24)*q12^2*q23*q24 + (1/24)*q12^2*q23*q32 + (1/24)*q12^2*q23*q34 +
  (1/24)*q12*q21^2*q23 + (1/12)*q12*q21*q23^2 +
  (1/12)*q12*q21*q23*q24 + (1/24)*q12*q21*q23*q32 +
  (1/24)*q12*q21*q23*q34 + (1/24)*q12*q23^3 +
  (1/12)*q12*q23^2*q24 + (1/12)*q12*q23^2*q32 +
  (1/24)*q12*q23^2*q34 + (1/24)*q12*q23*q24^2 +
  (1/24)*q12*q23*q24*q32 + (1/24)*q12*q23*q24*q34 +
  (1/24)*q12*q23*q32^2 + (1/12)*q12*q23*q32*q34 +
  (1/24)*q12*q23*q34^2
)
P13_5 = -u^5 * (
  (1/120)*q12^4*q23 + (1/40)*q12^3*q21*q23 + (1/120)*q12^3*q23^2 +
  (1/120)*q12^3*q23*q24 + (1/120)*q12^3*q23*q32 + (1/120)*q12^3*q23*q34 +
  (1/40)*q12^2*q21^2*q23 + (1/30)*q12^2*q21*q23^2 +
  (1/30)*q12^2*q21*q23*q24 + (1/60)*q12^2*q21*q23*q32 +
  (1/60)*q12^2*q21*q23*q34 + (1/120)*q12^2*q23^3 +
  (1/60)*q12^2*q23^2*q24 + (1/60)*q12^2*q23^2*q32 +
  (1/120)*q12^2*q23^2*q34 + (1/120)*q12^2*q23*q24^2 +
  (1/120)*q12^2*q23*q24*q32 + (1/120)*q12^2*q23*q24*q34 +
  (1/120)*q12^2*q23*q32^2 + (1/60)*q12^2*q23*q32*q34 +
  (1/120)*q12^2*q23*q34^2 + (1/120)*q12*q21^3*q23 +
  (1/40)*q12*q21^2*q23^2 + (1/40)*q12*q21^2*q23*q24 +
  (1/120)*q12*q21^2*q23*q32 + (1/120)*q12*q21^2*q23*q34 +
  (1/40)*q12*q21*q23^3 + (1/20)*q12*q21*q23^2*q24 +
  (1/30)*q12*q21*q23^2*q32 + (1/60)*q12*q21*q23^2*q34 +
  (1/40)*q12*q21*q23*q24^2 + (1/60)*q12*q21*q23*q24*q32 +
  (1/60)*q12*q21*q23*q24*q34 + (1/120)*q12*q21*q23*q32^2 +
  (1/60)*q12*q21*q23*q32*q34 + (1/120)*q12*q21*q23*q34^2 +
  (1/120)*q12*q23^4 + (1/40)*q12*q23^3*q24 + (1/40)*q12*q23^3*q32 +
  (1/120)*q12*q23^3*q34 + (1/40)*q12*q23^2*q24^2 +
  (1/30)*q12*q23^2*q24*q32 + (1/60)*q12*q23^2*q24*q34 +
  (1/40)*q12*q23^2*q32^2 + (1/30)*q12*q23^2*q32*q34 +
  (1/120)*q12*q23^2*q34^2 + (1/120)*q12*q23*q24^3 +
  (1/120)*q12*q23*q24^2*q32 + (1/120)*q12*q23*q24^2*q34 +
  (1/120)*q12*q23*q24*q32^2 + (1/60)*q12*q23*q24*q32*q34 +
  (1/120)*q12*q23*q24*q34^2 + (1/120)*q12*q23*q32^3 +
  (1/40)*q12*q23*q32^2*q34 + (1/40)*q12*q23*q32*q34^2 +
  (1/120)*q12*q23*q34^3
)
P[1,3] = P13_2 + P13_3 + P13_4 + P13_5

P14_2 = (1/2) * u^2 * q12 * q24
P14_3 = -u^3 * (
  (1/6)*q12^2*q24 + (1/6)*q12*q21*q24 + (1/6)*q12*q23*q24 -
  (1/6)*q12*q23*q34 + (1/6)*q12*q24^2
)
P14_4 = u^4 * (
  (1/24)*q12^3*q24 + (1/12)*q12^2*q21*q24 + (1/24)*q12^2*q23*q24 -
  (1/24)*q12^2*q23*q34 + (1/24)*q12^2*q24^2 + (1/24)*q12*q21^2*q24 +
  (1/12)*q12*q21*q23*q24 - (1/24)*q12*q21*q23*q34 +
  (1/12)*q12*q21*q24^2 + (1/24)*q12*q23^2*q24 -
  (1/24)*q12*q23^2*q34 + (1/12)*q12*q23*q24^2 +
  (1/24)*q12*q23*q24*q32 - (1/24)*q12*q23*q24*q34 -
  (1/24)*q12*q23*q32*q34 - (1/24)*q12*q23*q34^2 +
  (1/24)*q12*q24^3
)
P14_5 = -u^5 * (
  (1/120)*q12^4*q24 + (1/40)*q12^3*q21*q24 + (1/120)*q12^3*q23*q24 -
  (1/120)*q12^3*q23*q34 + (1/120)*q12^3*q24^2 + (1/40)*q12^2*q21^2*q24 +
  (1/30)*q12^2*q21*q23*q24 - (1/60)*q12^2*q21*q23*q34 +
  (1/30)*q12^2*q21*q24^2 + (1/120)*q12^2*q23^2*q24 -
  (1/120)*q12^2*q23^2*q34 + (1/60)*q12^2*q23*q24^2 +
  (1/120)*q12^2*q23*q24*q32 - (1/120)*q12^2*q23*q24*q34 +
  (1/120)*q12^2*q23*q32*q34 + (1/120)*q12^2*q23*q34^2 -
  (1/120)*q12^2*q24^3 + (1/120)*q12*q21^3*q24 +
  (1/40)*q12*q21^2*q23*q24 - (1/120)*q12*q21^2*q23*q34 +
  (1/40)*q12*q21^2*q24^2 + (1/40)*q12*q21*q23^2*q24 -
  (1/60)*q12*q21*q23^2*q34 + (1/20)*q12*q21*q23*q24^2 -
  (1/60)*q12*q21*q23*q24*q32 + (1/60)*q12*q21*q23*q24*q34 +
  (1/120)*q12*q21*q23*q32*q34 + (1/120)*q12*q21*q23*q34^2 -
  (1/40)*q12*q21*q24^3 + (1/120)*q12*q23^3*q24 -
  (1/120)*q12*q23^3*q34 + (1/40)*q12*q23^2*q24^2 +
  (1/60)*q12*q23^2*q24*q32 - (1/60)*q12*q23^2*q24*q34 -
  (1/60)*q12*q23^2*q32*q34 - (1/120)*q12*q23^2*q34^2 +
  (1/40)*q12*q23*q24^3 + (1/60)*q12*q23*q24^2*q32 -
  (1/120)*q12*q23*q24^2*q34 - (1/120)*q12*q23*q24*q32^2 +
  (1/120)*q12*q23*q24*q34^2 + (1/120)*q12*q23*q32^2*q34 +
  (1/60)*q12*q23*q32*q34^2 + (1/120)*q12*q23*q34^3 -
  (1/120)*q12*q24^4
)
P[1,4]= P14_2 + P14_3 + P14_4 + P14_5


P21_1 = u * q21
P21_2 = -u^2 * (
  (1/2)*q12*q21 + (1/2)*q21^2 + (1/2)*q21*q23 + (1/2)*q21*q24
)
P21_3 = u^3 * (
  (1/6)*q12^2*q21 + (1/3)*q12*q21^2 + (1/6)*q12*q21*q23 + (1/6)*q12*q21*q24 +
  (1/6)*q21^3 + (1/3)*q21^2*q23 + (1/3)*q21^2*q24 + (1/6)*q21*q23^2 +
  (1/3)*q21*q23*q24 + (1/6)*q21*q23*q32 + (1/6)*q21*q24^2
)
P21_4 = -u^4 * (
  (1/24)*q12^3*q21 + (1/8)*q12^2*q21^2 + (1/24)*q12^2*q21*q23 + (1/24)*q12^2*q21*q24 +
  (1/8)*q12*q21^3 + (1/6)*q12*q21^2*q23 + (1/6)*q12*q21^2*q24 + (1/24)*q12*q21*q23^2 +
  (1/12)*q12*q21*q23*q24 + (1/24)*q12*q21*q23*q32 + (1/24)*q12*q21*q24^2 +
  (1/24)*q21^4 + (1/8)*q21^3*q23 + (1/8)*q21^3*q24 + (1/8)*q21^2*q23^2 +
  (1/4)*q21^2*q23*q24 + (1/12)*q21^2*q23*q32 + (1/8)*q21^2*q24^2 + (1/24)*q21*q23^3 +
  (1/8)*q21*q23^2*q24 + (1/12)*q21*q23^2*q32 + (1/8)*q21*q23*q24^2 +
  (1/12)*q21*q23*q24*q32 + (1/24)*q21*q23*q32^2 + (1/24)*q21*q23*q32*q34 +
  (1/24)*q21*q24^3
)
P21_5 = u^5 * (
  (1/120)*q12^4*q21 + (1/30)*q12^3*q21^2 + (1/120)*q12^3*q21*q23 +
  (1/120)*q12^3*q21*q24 + (1/20)*q12^2*q21^3 + (1/20)*q12^2*q21^2*q23 +
  (1/20)*q12^2*q21^2*q24 + (1/120)*q12^2*q21*q23^2 + (1/60)*q12^2*q21*q23*q24 +
  (1/120)*q12^2*q21*q23*q32 + (1/120)*q12^2*q21*q24^2 + (1/30)*q12*q21^4 +
  (3/40)*q12*q21^3*q23 + (3/40)*q12*q21^3*q24 + (1/20)*q12*q21^2*q23^2 +
  (1/10)*q12*q21^2*q23*q24 + (1/30)*q12*q21^2*q23*q32 + (1/20)*q12*q21^2*q24^2 +
  (1/120)*q12*q21*q23^3 + (1/40)*q12*q21*q23^2*q24 + (1/60)*q12*q21*q23^2*q32 +
  (1/40)*q12*q21*q23*q24^2 + (1/60)*q12*q21*q23*q24*q32 +
  (1/120)*q12*q21*q23*q32^2 + (1/120)*q12*q21*q23*q32*q34 +
  (1/120)*q12*q21*q24^3 + (1/120)*q21^5 + (1/30)*q21^4*q23 +
  (1/30)*q21^4*q24 + (1/20)*q21^3*q23^2 + (1/10)*q21^3*q23*q24 +
  (1/40)*q21^3*q23*q32 + (1/20)*q21^3*q24^2 + (1/30)*q21^2*q23^3 +
  (1/10)*q21^2*q23^2*q24 + (1/20)*q21^2*q23^2*q32 + (1/10)*q21^2*q23*q24^2 +
  (1/20)*q21^2*q23*q24*q32 + (1/60)*q21^2*q23*q32^2 + (1/60)*q21^2*q23*q32*q34 +
  (1/30)*q21^2*q24^3 + (1/120)*q21*q23^4 + (1/30)*q21*q23^3*q24 +
  (1/40)*q21*q23^3*q32 + (1/20)*q21*q23^2*q24^2 + (1/20)*q21*q23^2*q24*q32 +
  (1/40)*q21*q23^2*q32^2 + (1/60)*q21*q23^2*q32*q34 +
  (1/30)*q21*q23*q24^3 + (1/40)*q21*q23*q24^2*q32 +
  (1/60)*q21*q23*q24*q32^2 + (1/60)*q21*q23*q24*q32*q34 +
  (1/120)*q21*q23*q32^3 + (1/60)*q21*q23*q32^2*q34 +
  (1/120)*q21*q23*q32*q34^2 + (1/120)*q21*q24^4
)
P[2,1] = P21_1 + P21_2 + P21_3 + P21_4 + P21_5


P22_0 = 1
P22_1 = -u*(q21 + q23 + q24)
P22_2 = u^2 * (
  (1/2)*q12*q21 + (1/2)*q21^2 + q21*q23 + q21*q24 +
  (1/2)*q23^2 + q23*q24 + (1/2)*q23*q32 + (1/2)*q24^2
)
P22_3 = -u^3 * (
  (1/6)*q12^2*q21 + (1/3)*q12*q21^2 + (1/3)*q12*q21*q23 + (1/3)*q12*q21*q24 +
  (1/6)*q21^3 + (1/2)*q21^2*q23 + (1/2)*q21^2*q24 + (1/2)*q21*q23^2 +
  q21*q23*q24 + (1/3)*q21*q23*q32 + (1/2)*q21*q24^2 + (1/6)*q23^3 +
  (1/2)*q23^2*q24 + (1/3)*q23^2*q32 + (1/2)*q23*q24^2 + (1/3)*q23*q24*q32 +
  (1/6)*q23*q32^2 + (1/6)*q23*q32*q34 + (1/6)*q24^3
)
P22_4 = u^4 * (
  (1/24)*q12^3*q21 + (1/8)*q12^2*q21^2 + (1/12)*q12^2*q21*q23 +
  (1/12)*q12^2*q21*q24 + (1/8)*q12*q21^3 + (1/4)*q12*q21^2*q23 +
  (1/4)*q12*q21^2*q24 + (1/8)*q12*q21*q23^2 + (1/4)*q12*q21*q23*q24 +
  (1/12)*q12*q21*q23*q32 + (1/8)*q12*q21*q24^2 + (1/24)*q21^4 +
  (1/6)*q21^3*q23 + (1/6)*q21^3*q24 + (1/4)*q21^2*q23^2 +
  (1/2)*q21^2*q23*q24 + (1/8)*q21^2*q23*q32 + (1/4)*q21^2*q24^2 +
  (1/6)*q21*q23^3 + (1/2)*q21*q23^2*q24 + (1/4)*q21*q23^2*q32 +
  (1/2)*q21*q23*q24^2 + (1/4)*q21*q23*q24*q32 + (1/12)*q21*q23*q32^2 +
  (1/12)*q21*q23*q32*q34 + (1/6)*q21*q24^3 + (1/24)*q23^4 +
  (1/6)*q23^3*q24 + (1/8)*q23^3*q32 + (1/4)*q23^2*q24^2 +
  (1/4)*q23^2*q24*q32 + (1/8)*q23^2*q32^2 + (1/12)*q23^2*q32*q34 +
  (1/6)*q23*q24^3 + (1/8)*q23*q24^2*q32 + (1/12)*q23*q24*q32^2 +
  (1/12)*q23*q24*q32*q34 + (1/24)*q23*q32^3 + (1/12)*q23*q32^2*q34 +
  (1/24)*q23*q32*q34^2 + (1/24)*q24^4
)
P22_5 = -u^5 * (
  (1/120)*q12^4*q21 + (1/30)*q12^3*q21^2 + (1/60)*q12^3*q21*q23 +
  (1/60)*q12^3*q21*q24 + (1/20)*q12^2*q21^3 + (3/40)*q12^2*q21^2*q23 +
  (3/40)*q12^2*q21^2*q24 + (1/40)*q12^2*q21*q23^2 + (1/20)*q12^2*q21*q23*q24 +
  (1/60)*q12^2*q21*q23*q32 + (1/40)*q12^2*q21*q24^2 + (1/30)*q12*q21^4 +
  (1/10)*q12*q21^3*q23 + (1/10)*q12*q21^3*q24 + (1/10)*q12*q21^2*q23^2 +
  (1/5)*q12*q21^2*q23*q24 + (1/20)*q12*q21^2*q23*q32 + (1/10)*q12*q21^2*q24^2 +
  (1/30)*q12*q21*q23^3 + (1/10)*q12*q21*q23^2*q24 + (1/20)*q12*q21*q23^2*q32 +
  (1/10)*q12*q21*q23*q24^2 + (1/20)*q12*q21*q23*q24*q32 +
  (1/60)*q12*q21*q23*q32^2 + (1/60)*q12*q21*q23*q32*q34 +
  (1/30)*q12*q21*q24^3 + (1/120)*q21^5 + (1/24)*q21^4*q23 +
  (1/24)*q21^4*q24 + (1/12)*q21^3*q23^2 + (1/6)*q21^3*q23*q24 +
  (1/30)*q21^3*q23*q32 + (1/12)*q21^3*q24^2 + (1/12)*q21^2*q23^3 +
  (1/4)*q21^2*q23^2*q24 + (1/10)*q21^2*q23^2*q32 + (1/4)*q21^2*q23*q24^2 +
  (1/10)*q21^2*q23*q24*q32 + (1/40)*q21^2*q23*q32^2 +
  (1/40)*q21^2*q23*q32*q34 + (1/12)*q21^2*q24^3 + (1/24)*q21*q23^4 +
  (1/6)*q21*q23^3*q24 + (1/10)*q21*q23^3*q32 + (1/4)*q21*q23^2*q24^2 +
  (1/5)*q21*q23^2*q24*q32 + (3/40)*q21*q23^2*q32^2 +
  (1/20)*q21*q23^2*q32*q34 + (1/6)*q21*q23*q24^3 +
  (1/10)*q21*q23*q24^2*q32 + (1/20)*q21*q23*q24*q32^2 +
  (1/20)*q21*q23*q24*q32*q34 + (1/60)*q21*q23*q32^3 +
  (1/30)*q21*q23*q32^2*q34 + (1/60)*q21*q23*q32*q34^2 +
  (1/24)*q21*q24^4 + (1/120)*q23^5 + (1/24)*q23^4*q24 +
  (1/30)*q23^4*q32 + (1/12)*q23^3*q24^2 + (1/10)*q23^3*q24*q32 +
  (1/20)*q23^3*q32^2 + (1/40)*q23^3*q32*q34 + (1/12)*q23^2*q24^3 +
  (1/10)*q23^2*q24^2*q32 + (3/40)*q23^2*q24*q32^2 +
  (1/20)*q23^2*q24*q32*q34 + (1/30)*q23^2*q32^3 + (1/20)*q23^2*q32^2*q34 +
  (1/60)*q23^2*q32*q34^2 + (1/24)*q23*q24^4 + (1/30)*q23*q24^3*q32 +
  (1/40)*q23*q24^2*q32^2 + (1/40)*q23*q24^2*q32*q34 +
  (1/60)*q23*q24*q32^3 + (1/30)*q23*q24*q32^2*q34 +
  (1/60)*q23*q24*q32*q34^2 + (1/120)*q23*q32^4 +
  (1/40)*q23*q32^3*q34 + (1/40)*q23*q32^2*q34^2 +
  (1/120)*q23*q32*q34^3 + (1/120)*q24^5
)
P[2,2] = P22_0 + P22_1 + P22_2 + P22_3 + P22_4 + P22_5

P23_1 = u * q23
P23_2 = -u^2 * (
  (1/2)*q21*q23 + (1/2)*q23^2 + (1/2)*q23*q24 + (1/2)*q23*q32 + (1/2)*q23*q34
)
P23_3 = u^3 * (
  (1/6)*q12*q21*q23 + (1/6)*q21^2*q23 + (1/3)*q21*q23^2 + (1/3)*q21*q23*q24 +
  (1/6)*q21*q23*q32 + (1/6)*q21*q23*q34 + (1/6)*q23^3 +
  (1/3)*q23^2*q24 + (1/3)*q23^2*q32 + (1/6)*q23^2*q34 +
  (1/6)*q23*q24^2 + (1/6)*q23*q24*q32 + (1/6)*q23*q24*q34 +
  (1/6)*q23*q32^2 + (1/3)*q23*q32*q34 + (1/6)*q23*q34^2
)
P23_4 = -u^4 * (
  (1/24)*q12^2*q21*q23 + (1/12)*q12*q21^2*q23 + (1/12)*q12*q21*q23^2 +
  (1/12)*q12*q21*q23*q24 + (1/24)*q12*q21*q23*q32 + (1/24)*q12*q21*q23*q34 +
  (1/24)*q21^3*q23 + (1/8)*q21^2*q23^2 + (1/8)*q21^2*q23*q24 +
  (1/24)*q21^2*q23*q32 + (1/24)*q21^2*q23*q34 + (1/8)*q21*q23^3 +
  (1/4)*q21*q23^2*q24 + (1/6)*q21*q23^2*q32 + (1/12)*q21*q23^2*q34 +
  (1/8)*q21*q23*q24^2 + (1/12)*q21*q23*q24*q32 + (1/12)*q21*q23*q24*q34 +
  (1/24)*q21*q23*q32^2 + (1/12)*q21*q23*q32*q34 + (1/24)*q21*q23*q34^2 +
  (1/24)*q23^4 + (1/8)*q23^3*q24 + (1/8)*q23^3*q32 + (1/24)*q23^3*q34 +
  (1/8)*q23^2*q24^2 + (1/6)*q23^2*q24*q32 + (1/12)*q23^2*q24*q34 +
  (1/8)*q23^2*q32^2 + (1/6)*q23^2*q32*q34 + (1/24)*q23^2*q34^2 +
  (1/24)*q23*q24^3 + (1/24)*q23*q24^2*q32 + (1/24)*q23*q24^2*q34 +
  (1/24)*q23*q24*q32^2 + (1/12)*q23*q24*q32*q34 + (1/24)*q23*q24*q34^2 +
  (1/24)*q23*q32^3 + (1/8)*q23*q32^2*q34 + (1/8)*q23*q32*q34^2 +
  (1/24)*q23*q34^3
)
P23_5 = u^5 * (
  (1/120)*q12^3*q21*q23 + (1/40)*q12^2*q21^2*q23 + (1/60)*q12^2*q21*q23^2 +
  (1/60)*q12^2*q21*q23*q24 + (1/120)*q12^2*q21*q23*q32 + (1/120)*q12^2*q21*q23*q34 +
  (1/40)*q12*q21^3*q23 + (1/20)*q12*q21^2*q23^2 + (1/20)*q12*q21^2*q23*q24 +
  (1/60)*q12*q21^2*q23*q32 + (1/60)*q12*q21^2*q23*q34 +
  (1/40)*q12*q21*q23^3 + (1/20)*q12*q21*q23^2*q24 + (1/30)*q12*q21*q23^2*q32 +
  (1/60)*q12*q21*q23^2*q34 + (1/40)*q12*q21*q23*q24^2 +
  (1/60)*q12*q21*q23*q24*q32 + (1/60)*q12*q21*q23*q24*q34 +
  (1/120)*q12*q21*q23*q32^2 + (1/60)*q12*q21*q23*q32*q34 +
  (1/120)*q12*q21*q23*q34^2 + (1/120)*q21^4*q23 + (1/30)*q21^3*q23^2 +
  (1/30)*q21^3*q23*q24 + (1/120)*q21^3*q23*q32 + (1/120)*q21^3*q23*q34 +
  (1/20)*q21^2*q23^3 + (1/10)*q21^2*q23^2*q24 + (1/20)*q21^2*q23^2*q32 +
  (1/40)*q21^2*q23^2*q34 + (1/20)*q21^2*q23*q24^2 +
  (1/40)*q21^2*q23*q24*q32 + (1/40)*q21^2*q23*q24*q34 +
  (1/120)*q21^2*q23*q32^2 + (1/60)*q21^2*q23*q32*q34 +
  (1/120)*q21^2*q23*q34^2 + (1/30)*q21*q23^4 + (1/10)*q21*q23^3*q24 +
  (3/40)*q21*q23^3*q32 + (1/40)*q21*q23^3*q34 + (1/10)*q21*q23^2*q24^2 +
  (1/10)*q21*q23^2*q24*q32 + (1/20)*q21*q23^2*q24*q34 +
  (1/20)*q21*q23^2*q32^2 + (1/15)*q21*q23^2*q32*q34 +
  (1/60)*q21*q23^2*q34^2 + (1/30)*q21*q23*q24^3 + (1/40)*q21*q23*q24^2*q32 +
  (1/40)*q21*q23*q24^2*q34 + (1/60)*q21*q23*q24*q32^2 +
  (1/30)*q21*q23*q24*q32*q34 + (1/60)*q21*q23*q24*q34^2 +
  (1/120)*q21*q23*q32^3 + (1/40)*q21*q23*q32^2*q34 +
  (1/40)*q21*q23*q32*q34^2 + (1/120)*q21*q23*q34^3 + (1/120)*q23^5 +
  (1/30)*q23^4*q24 + (1/30)*q23^4*q32 + (1/120)*q23^4*q34 +
  (1/20)*q23^3*q24^2 + (3/40)*q23^3*q24*q32 + (1/40)*q23^3*q24*q34 +
  (1/20)*q23^3*q32^2 + (1/20)*q23^3*q32*q34 + (1/120)*q23^3*q34^2 +
  (1/30)*q23^2*q)


P[2,3] = P23_1 + P23_2 + P23_3 + P23_4 + P23_5 

P24_1 = u * q24
P24_2 = -u^2 * ((1/2)*q21*q24 + (1/2)*q23*q24 - (1/2)*q23*q34 + (1/2)*q24^2)
P24_3 = u^3 * (
  (1/6)*q12*q21*q24 + (1/6)*q21^2*q24 + (1/3)*q21*q23*q24 - (1/6)*q21*q23*q34 +
  (1/3)*q21*q24^2 + (1/6)*q23^2*q24 - (1/6)*q23^2*q34 + (1/3)*q23*q24^2 +
  (1/6)*q23*q24*q32 - (1/6)*q23*q24*q34 - (1/6)*q23*q32*q34 - (1/6)*q23*q34^2 +
  (1/6)*q24^3)
  
P24_4 = -u^4 * (
  (1/24)*q12^2*q21*q24 + (1/12)*q12*q21^2*q24 + (1/12)*q12*q21*q23*q24 -
  (1/24)*q12*q21*q23*q34 + (1/12)*q12*q21*q24^2 + (1/24)*q21^3*q24 +
  (1/8)*q21^2*q23*q24 - (1/24)*q21^2*q23*q34 + (1/8)*q21^2*q24^2 +
  (1/8)*q21*q23^2*q24 - (1/12)*q21*q23^2*q34 + (1/4)*q21*q23*q24^2 +
  (1/12)*q21*q23*q24*q32 - (1/12)*q21*q23*q24*q34 + (1/24)*q21*q23*q32*q34 +
  (1/24)*q21*q23*q34^2 + (1/8)*q21*q24^3 + (1/24)*q23^3*q24 -
  (1/24)*q23^3*q34 + (1/8)*q23^2*q24^2 + (1/12)*q23^2*q24*q32 -
  (1/12)*q23^2*q24*q34 + (1/12)*q23^2*q32*q34 + (1/24)*q23^2*q34^2 +
  (1/8)*q23*q24^3 + (1/12)*q23*q24^2*q32 - (1/24)*q23*q24^2*q34 -
  (1/24)*q23*q24*q32^2 + (1/24)*q23*q24*q34^2 + (1/24)*q23*q32^2*q34 +
  (1/12)*q23*q32*q34^2 + (1/24)*q23*q34^3 - (1/24)*q24^4)
  
P24_5 = u^5 * (
  (1/120)*q12^3*q21*q24 + (1/40)*q12^2*q21^2*q24 + (1/60)*q12^2*q21*q23*q24 -
  (1/120)*q12^2*q21*q23*q34 + (1/60)*q12^2*q21*q24^2 + (1/40)*q12*q21^3*q24 +
  (1/20)*q12*q21^2*q23*q24 - (1/60)*q12*q21^2*q23*q34 + (1/20)*q12*q21^2*q24^2 +
  (1/40)*q12*q21*q23^2*q24 - (1/60)*q12*q21*q23^2*q34 + (1/20)*q12*q21*q23*q24^2 +
  (1/60)*q12*q21*q23*q24*q32 - (1/60)*q12*q21*q23*q24*q34 -
  (1/120)*q12*q21*q23*q32*q34 - (1/120)*q12*q21*q23*q34^2 +
  (1/40)*q12*q21*q24^3 + (1/120)*q21^4*q24 + (1/30)*q21^3*q23*q24 -
  (1/120)*q21^3*q23*q34 + (1/30)*q21^3*q24^2 + (1/20)*q21^2*q23^2*q24 -
  (1/40)*q21^2*q23^2*q34 + (1/10)*q21^2*q23*q24^2 +
  (1/40)*q21^2*q23*q24*q32 - (1/40)*q21^2*q23*q24*q34 -
  (1/120)*q21^2*q23*q32*q34 - (1/120)*q21^2*q23*q34^2 +
  (1/20)*q21^2*q24^3 + (1/30)*q21*q23^3*q24 - (1/40)*q21*q23^3*q34 +
  (1/10)*q21*q23^2*q24^2 + (1/20)*q21*q23^2*q24*q32 -
  (1/20)*q21*q23^2*q24*q34 - (1/30)*q21*q23^2*q32*q34 -
  (1/60)*q21*q23^2*q34^2 + (1/10)*q21*q23*q24^3 +
  (1/20)*q21*q23*q24^2*q32 - (1/40)*q21*q23*q24^2*q34 +
  (1/60)*q21*q23*q24*q32^2 - (1/60)*q21*q23*q24*q34^2 -
  (1/120)*q21*q23*q32^2*q34 - (1/60)*q21*q23*q32*q34^2 -
  (1/120)*q21*q23*q34^3 + (1/30)*q21*q24^4 + (1/120)*q23^4*q24 -
  (1/120)*q23^4*q34 + (1/30)*q23^3*q24^2 + (1/40)*q23^3*q24*q32 -
  (1/40)*q23^3*q24*q34 - (1/40)*q23^3*q32*q34 - (1/120)*q23^3*q34^2 +
  (1/20)*q23^2*q24^3 + (1/20)*q23^2*q24^2*q32 - (1/40)*q23^2*q24^2*q34 +
  (1/40)*q23^2*q24*q32^2 - (1/60)*q23^2*q24*q32*q34 -
  (1/60)*q23^2*q24*q34^2 - (1/40)*q23^2*q32^2*q34 -
  (1/30)*q23^2*q32*q34^2 - (1/120)*q23^2*q34^3 + (1/30)*q23*q24^4 +
  (1/40)*q23*q24^3*q32 - (1/120)*q23*q24^3*q34 + (1/60)*q23*q24^2*q32^2 +
  (1/120)*q23*q24^2*q32*q34 - (1/120)*q23*q24^2*q34^2 +
  (1/120)*q23*q24*q32^3 + (1/120)*q23*q24*q32^2*q34 -
  (1/120)*q23*q24*q32*q34^2 - (1/120)*q23*q24*q34^3 -
  (1/120)*q23*q32^3*q34 - (1/40)*q23*q32^2*q34^2 -
  (1/40)*q23*q32*q34^3 - (1/120)*q23*q34^4 + (1/120)*q24^5
)

P[2,4] = P24_1 + P24_2 + P24_3 + P24_4 + P24_5



P31_2 = (1/2) * u^2 * q21 * q32
P31_3 = -u^3 * (
  (1/6)*q12*q21*q32 + (1/6)*q21^2*q32 + (1/6)*q21*q23*q32 +
  (1/6)*q21*q24*q32 + (1/6)*q21*q32^2 + (1/6)*q21*q32*q34
)
P31_3 = -u^3 * (
  (1/6)*q12*q21*q32 + (1/6)*q21^2*q32 + (1/6)*q21*q23*q32 +
  (1/6)*q21*q24*q32 + (1/6)*q21*q32^2 + (1/6)*q21*q32*q34
)

p31_4 = "(1/6)*u^4*(-q12*q21 + (-q21 - q23 - q24)*q21)*q32"

P31_5 = -u^5 * (
  (1/120)*q12^3*q21*q32 + (1/40)*q12^2*q21^2*q32 +
  (1/120)*q12^2*q21*q23*q32 + (1/120)*q12^2*q21*q24*q32 +
  (1/120)*q12^2*q21*q32^2 + (1/120)*q12^2*q21*q32*q34 +
  (1/40)*q12*q21^3*q32 + (1/30)*q12*q21^2*q23*q32 +
  (1/30)*q12*q21^2*q24*q32 + (1/60)*q12*q21^2*q32^2 +
  (1/60)*q12*q21^2*q32*q34 + (1/120)*q12*q21*q23^2*q32 +
  (1/60)*q12*q21*q23*q24*q32 + (1/60)*q12*q21*q23*q32^2 +
  (1/120)*q12*q21*q23*q32*q34 + (1/120)*q12*q21*q24^2*q32 +
  (1/120)*q12*q21*q24*q32^2 + (1/120)*q12*q21*q24*q32*q34 +
  (1/120)*q12*q21*q32^3 + (1/60)*q12*q21*q32^2*q34 +
  (1/120)*q12*q21*q32*q34^2 + (1/120)*q21^4*q32 +
  (1/40)*q21^3*q23*q32 + (1/40)*q21^3*q24*q32 +
  (1/120)*q21^3*q32^2 + (1/120)*q21^3*q32*q34 +
  (1/40)*q21^2*q23^2*q32 + (1/20)*q21^2*q23*q24*q32 +
  (1/30)*q21^2*q23*q32^2 + (1/60)*q21^2*q23*q32*q34 +
  (1/40)*q21^2*q24^2*q32 + (1/60)*q21^2*q24*q32^2 +
  (1/60)*q21^2*q24*q32*q34 + (1/120)*q21^2*q32^3 +
  (1/60)*q21^2*q32^2*q34 + (1/120)*q21^2*q32*q34^2 +
  (1/120)*q21*q23^3*q32 + (1/40)*q21*q23^2*q24*q32 +
  (1/40)*q21*q23^2*q32^2 + (1/120)*q21*q23^2*q32*q34 +
  (1/40)*q21*q23*q24^2*q32 + (1/30)*q21*q23*q24*q32^2 +
  (1/60)*q21*q23*q24*q32*q34 + (1/40)*q21*q23*q32^3 +
  (1/30)*q21*q23*q32^2*q34 + (1/120)*q21*q23*q32*q34^2 +
  (1/120)*q21*q24^3*q32 + (1/120)*q21*q24^2*q32^2 +
  (1/120)*q21*q24^2*q32*q34 + (1/120)*q21*q24*q32^3 +
  (1/60)*q21*q24*q32^2*q34 + (1/120)*q21*q24*q32*q34^2 +
  (1/120)*q21*q32^4 + (1/40)*q21*q32^3*q34 +
  (1/40)*q21*q32^2*q34^2 + (1/120)*q21*q32*q34^3
)
P[3,1] = P31_2 + P31_3 + P31_4 + P31_5

P32_1 = u * q32
P32_2 = -u^2 * (
  (1/2)*q21*q32 + (1/2)*q23*q32 + (1/2)*q24*q32 + (1/2)*q32^2 + (1/2)*q32*q34
)
P32_3 = u^3 * (
  (1/6)*q12*q21*q32 + (1/6)*q21^2*q32 + (1/3)*q21*q23*q32 + (1/3)*q21*q24*q32 +
  (1/6)*q21*q32^2 + (1/6)*q21*q32*q34 + (1/6)*q23^2*q32 + (1/3)*q23*q24*q32 +
  (1/3)*q23*q32^2 + (1/6)*q23*q32*q34 + (1/6)*q24^2*q32 + (1/6)*q24*q32^2 +
  (1/6)*q24*q32*q34 + (1/6)*q32^3 + (1/3)*q32^2*q34 + (1/6)*q32*q34^2
)
P32_4 = -u^4 * (
  (1/24)*q12^2*q21*q32 + (1/12)*q12*q21^2*q32 + (1/12)*q12*q21*q23*q32 +
  (1/12)*q12*q21*q24*q32 + (1/24)*q12*q21*q32^2 + (1/24)*q12*q21*q32*q34 +
  (1/24)*q21^3*q32 + (1/8)*q21^2*q23*q32 + (1/8)*q21^2*q24*q32 +
  (1/24)*q21^2*q32^2 + (1/24)*q21^2*q32*q34 + (1/8)*q21*q23^2*q32 +
  (1/4)*q21*q23*q24*q32 + (1/6)*q21*q23*q32^2 + (1/12)*q21*q23*q32*q34 +
  (1/8)*q21*q24^2*q32 + (1/12)*q21*q24*q32^2 + (1/12)*q21*q24*q32*q34 +
  (1/24)*q21*q32^3 + (1/12)*q21*q32^2*q34 + (1/24)*q21*q32*q34^2 +
  (1/24)*q23^3*q32 + (1/8)*q23^2*q24*q32 + (1/8)*q23^2*q32^2 +
  (1/24)*q23^2*q32*q34 + (1/8)*q23*q24^2*q32 + (1/6)*q23*q24*q32^2 +
  (1/12)*q23*q24*q32*q34 + (1/8)*q23*q32^3 + (1/6)*q23*q32^2*q34 +
  (1/24)*q23*q32*q34^2 + (1/24)*q24^3*q32 + (1/24)*q24^2*q32^2 +
  (1/24)*q24^2*q32*q34 + (1/24)*q24*q32^3 + (1/12)*q24*q32^2*q34 +
  (1/24)*q24*q32*q34^2 + (1/24)*q32^4 + (1/8)*q32^3*q34 +
  (1/8)*q32^2*q34^2 + (1/24)*q32*q34^3
)
P32_5 = u^5 * (
  (1/120)*q12^3*q21*q32 + (1/40)*q12^2*q21^2*q32 + (1/60)*q12^2*q21*q23*q32 +
  (1/60)*q12^2*q21*q24*q32 + (1/120)*q12^2*q21*q32^2 +
  (1/120)*q12^2*q21*q32*q34 + (1/40)*q12*q21^3*q32 +
  (1/20)*q12*q21^2*q23*q32 + (1/20)*q12*q21^2*q24*q32 +
  (1/60)*q12*q21^2*q32^2 + (1/60)*q12*q21^2*q32*q34 +
  (1/40)*q12*q21*q23^2*q32 + (1/20)*q12*q21*q23*q24*q32 +
  (1/30)*q12*q21*q23*q32^2 + (1/60)*q12*q21*q23*q32*q34 +
  (1/40)*q12*q21*q24^2*q32 + (1/60)*q12*q21*q24*q32^2 +
  (1/60)*q12*q21*q24*q32*q34 + (1/120)*q12*q21*q32^3 +
  (1/60)*q12*q21*q32^2*q34 + (1/120)*q12*q21*q32*q34^2 +
  (1/120)*q21^4*q32 + (1/30)*q21^3*q23*q32 + (1/30)*q21^3*q24*q32 +
  (1/120)*q21^3*q32^2 + (1/120)*q21^3*q32*q34 +
  (1/20)*q21^2*q23^2*q32 + (1/10)*q21^2*q23*q24*q32 +
  (1/20)*q21^2*q23*q32^2 + (1/40)*q21^2*q23*q32*q34 +
  (1/20)*q21^2*q24^2*q32 + (1/40)*q21^2*q24*q32^2 +
  (1/40)*q21^2*q24*q32*q34 + (1/120)*q21^2*q32^3 +
  (1/60)*q21^2*q32^2*q34 + (1/120)*q21^2*q32*q34^2 +
  (1/30)*q21*q23^3*q32 + (1/10)*q21*q23^2*q24*q32 +
  (3/40)*q21*q23^2*q32^2 + (1/40)*q21*q23^2*q32*q34 +
  (1/10)*q21*q23*q24^2*q32 + (1/10)*q21*q23*q24*q32^2 +
  (1/20)*q21*q23*q24*q32*q34 + (1/20)*q21*q23*q32^3 +
  (1/15)*q21*q23*q32^2*q34 + (1/60)*q21*q23*q32*q34^2 +
  (1/30)*q21*q24^3*q32 + (1/40)*q21*q24^2*q32^2 +
  (1/40)*q21*q24^2*q32*q34 + (1/60)*q21*q24*q32^3 +
  (1/30)*q21*q24*q32^2*q34 + (1/60)*q21*q24*q32*q34^2 +
  (1/120)*q21*q32^4 + (1/40)*q21*q32^3*q34 +
  (1/40)*q21*q32^2*q34^2 + (1/120)*q21*q32*q34^3 +
  (1/120)*q23^4*q32 + (1/30)*q23^3*q24*q32 +
  (1/30)*q23^3*q32^2 + (1/120)*q23^3*q32*q34 +
  (1/20)*q23^2*q24^2*q32 + (3/40)*q23^2*q24*q32^2 +
  (1/40)*q23^2*q24*q32*q34 + (1/20)*q23^2*q32^3 +
  (1/20)*q23^2*q32^2*q34 + (1/120)*q23^2*q32*q34^2 + 
(1/30)*q23*q24^3*q32 + (1/20)*q23*q24^2*q32^2 + (1/40)*q23*q24^2*q32*q34 + 
(1/20)*q23*q24*q32^3 + (1/15)*q23*q24*q32^2*q34 + (1/60)*q23*q24*q32*q34^2 + 
(1/30)*q23*q32^4 + (3/40)*q23*q32^3*q34 + (1/20)*q23*q32^2*q34^2 + (1/120)*q23*q32*q34^3 + 
(1/120)*q24^4*q32 + (1/120)*q24^3*q32^2 + (1/120)*q24^3*q32*q34 + 
(1/120)*q24^2*q32^3 + (1/60)*q24^2*q32^2*q34 + (1/120)*q24^2*q32*q34^2 + 
(1/120)*q24*q32^4 + (1/40)*q24*q32^3*q34 + (1/40)*q24*q32^2*q34^2 + (1/120)*q24*q32*q34^3 + 
(1/120)*q32^5 + (1/30)*q32^4*q34 + (1/20)*q32^3*q34^2 + 
(1/30)*q32^2*q34^3 + (1/120)*q32*q34^4

  
)

P[3,2] = P32_1 + P32_2 + P32_3 + P32_4 + P32_5

P33_0 = 1
P33_1 = -u * (q32 + q34)
P33_2 = u^2 * (
  (1/2)*q23*q32 + (1/2)*q32^2 + q32*q34 + (1/2)*q34^2
)
P33_3 = -u^3 * (
  (1/6)*q21*q23*q32 + (1/6)*q23^2*q32 + (1/6)*q23*q24*q32 +
  (1/3)*q23*q32^2 + (1/3)*q23*q32*q34 + (1/6)*q32^3 +
  (1/2)*q32^2*q34 + (1/2)*q32*q34^2 + (1/6)*q34^3
)
P33_4 = u^4 * (
  (1/24)*q12*q21*q23*q32 + (1/24)*q21^2*q23*q32 + (1/12)*q21*q23^2*q32 +
  (1/12)*q21*q23*q24*q32 + (1/12)*q21*q23*q32^2 + (1/12)*q21*q23*q32*q34 +
  (1/24)*q23^3*q32 + (1/12)*q23^2*q24*q32 + (1/8)*q23^2*q32^2 +
  (1/12)*q23^2*q32*q34 + (1/24)*q23*q24^2*q32 + (1/12)*q23*q24*q32^2 +
  (1/12)*q23*q24*q32*q34 + (1/8)*q23*q32^3 + (1/4)*q23*q32^2*q34 +
  (1/8)*q23*q32*q34^2 + (1/24)*q32^4 + (1/6)*q32^3*q34 +
  (1/4)*q32^2*q34^2 + (1/6)*q32*q34^3 + (1/24)*q34^4
)
P33_5 = -u^5 * (
  (1/120)*q12^2*q21*q23*q32 + (1/60)*q12*q21^2*q23*q32 +
  (1/60)*q12*q21*q23^2*q32 + (1/60)*q12*q21*q23*q24*q32 +
  (1/60)*q12*q21*q23*q32^2 + (1/60)*q12*q21*q23*q32*q34 +
  (1/120)*q21^3*q23*q32 + (1/40)*q21^2*q23^2*q32 +
  (1/40)*q21^2*q23*q24*q32 + (1/60)*q21^2*q23*q32^2 +
  (1/60)*q21^2*q23*q32*q34 + (1/40)*q21*q23^3*q32 +
  (1/20)*q21*q23^2*q24*q32 + (1/20)*q21*q23^2*q32^2 +
  (1/30)*q21*q23^2*q32*q34 + (1/40)*q21*q23*q24^2*q32 +
  (1/30)*q21*q23*q24*q32^2 + (1/30)*q21*q23*q24*q32*q34 +
  (1/40)*q21*q23*q32^3 + (1/20)*q21*q23*q32^2*q34 +
  (1/40)*q21*q23*q32*q34^2 + (1/120)*q23^4*q32 +
  (1/40)*q23^3*q24*q32 + (1/30)*q23^3*q32^2 + (1/60)*q23^3*q32*q34 +
  (1/40)*q23^2*q24^2*q32 + (1/20)*q23^2*q24*q32^2 +
  (1/30)*q23^2*q24*q32*q34 + (1/20)*q23^2*q32^3 +
  (3/40)*q23^2*q32^2*q34 + (1/40)*q23^2*q32*q34^2 +
  (1/120)*q23*q24^3*q32 + (1/60)*q23*q24^2*q32^2 +
  (1/60)*q23*q24^2*q32*q34 + (1/40)*q23*q24*q32^3 +
  (1/20)*q23*q24*q32^2*q34 + (1/40)*q23*q24*q32*q34^2 +
  (1/30)*q23*q32^4 + (1/10)*q23*q32^3*q34 +
  (1/10)*q23*q32^2*q34^2 + (1/30)*q23*q32*q34^3 +
  (1/120)*q32^5 + (1/24)*q32^4*q34 + (1/12)*q32^3*q34^2 +
  (1/12)*q32^2*q34^3 + (1/24)*q32*q34^4 + (1/120)*q34^5
)

P33 = P33_0 + P33_1 + P33_2 + P33_3 + P33_4 + P33_5


P34_1 = u * q34
P34_2 = u^2 * (
  (1/2)*q24*q32 - (1/2)*q32*q34 - (1/2)*q34^2
)
P34_3 = u^3 * (
  -(1/6)*q21*q24*q32 - (1/6)*q23*q24*q32 + (1/6)*q23*q32*q34 -
  (1/6)*q24^2*q32 - (1/6)*q24*q32^2 - (1/6)*q24*q32*q34 +
  (1/6)*q32^2*q34 + (1/3)*q32*q34^2 + (1/6)*q34^3
)
P34_4 = u^4 * (
  (1/24)*q12*q21*q24*q32 + (1/24)*q21^2*q24*q32 + (1/12)*q21*q23*q24*q32 -
  (1/24)*q21*q23*q32*q34 + (1/12)*q21*q24^2*q32 + (1/24)*q21*q24*q32^2 +
  (1/24)*q21*q24*q32*q34 + (1/24)*q23^2*q24*q32 -
  (1/24)*q23^2*q32*q34 + (1/12)*q23*q24^2*q32 + (1/12)*q23*q24*q32^2 -
  (1/12)*q23*q32^2*q34 - (1/12)*q23*q32*q34^2 + (1/24)*q24^3*q32 +
  (1/24)*q24^2*q32^2 + (1/24)*q24^2*q32*q34 + (1/24)*q24*q32^3 +
  (1/12)*q24*q32^2*q34 + (1/24)*q24*q32*q34^2 - (1/24)*q32^3*q34 -
  (1/8)*q32^2*q34^2 - (1/8)*q32*q34^3 - (1/24)*q34^4
)
P34_5 = u^5 * (
  -(1/120)*q12^2*q21*q24*q32 - (1/60)*q12*q21^2*q24*q32 -
  (1/60)*q12*q21*q23*q24*q32 + (1/120)*q12*q21*q23*q32*q34 -
  (1/60)*q12*q21*q24^2*q32 - (1/120)*q12*q21*q24*q32^2 -
  (1/120)*q12*q21*q24*q32*q34 - (1/120)*q21^3*q24*q32 -
  (1/40)*q21^2*q23*q24*q32 + (1/120)*q21^2*q23*q32*q34 -
  (1/40)*q21^2*q24^2*q32 - (1/120)*q21^2*q24*q32^2 -
  (1/120)*q21^2*q24*q32*q34 - (1/40)*q21*q23^2*q24*q32 +
  (1/60)*q21*q23^2*q32*q34 - (1/20)*q21*q23*q24^2*q32 -
  (1/30)*q21*q23*q24*q32^2 + (1/60)*q21*q23*q32^2*q34 +
  (1/60)*q21*q23*q32*q34^2 - (1/40)*q21*q24^3*q32 -
  (1/60)*q21*q24^2*q32^2 - (1/60)*q21*q24^2*q32*q34 -
  (1/120)*q21*q24*q32^3 - (1/60)*q21*q24*q32^2*q34 -
  (1/120)*q21*q24*q32*q34^2 - (1/120)*q23^3*q24*q32 +
  (1/120)*q23^3*q32*q34 - (1/40)*q23^2*q24^2*q32 -
  (1/40)*q23^2*q24*q32^2 + (1/120)*q23^2*q24*q32*q34 +
  (1/40)*q23^2*q32^2*q34 + (1/60)*q23^2*q32*q34^2 -
  (1/40)*q23*q24^3*q32 - (1/30)*q23*q24^2*q32^2 -
  (1/120)*q23*q24^2*q32*q34 - (1/40)*q23*q24*q32^3 -
  (1/60)*q23*q24*q32^2*q34 + (1/120)*q23*q24*q32*q34^2 +
  (1/40)*q23*q32^3*q34 + (1/20)*q23*q32^2*q34^2 +
  (1/40)*q23*q32*q34^3 - (1/120)*q24^4*q32 -
  (1/120)*q24^3*q32^2 - (1/120)*q24^3*q32*q34 -
  (1/120)*q24^2*q32^3 - (1/60)*q24^2*q32^2*q34 -
  (1/120)*q24^2*q32*q34^2 - (1/120)*q24*q32^4 -
  (1/40)*q24*q32^3*q34 - (1/40)*q24*q32^2*q34^2 -
  (1/120)*q24*q32*q34^3 + (1/120)*q32^4*q34 +
  (1/30)*q32^3*q34^2 + (1/20)*q32^2*q34^3 +
  (1/30)*q32*q34^4 + (1/120)*q34^5
)
P34 = P34_1 + P34_2 + P34_3 + P34_4 + P34_5



P[4,1] = 0.0
P[4,2] = 0.0
P[4,3] = 0.0
P[4,4] = 1.0


# Normalized transition probabilities are used to stabilize the model
# If p[1,j] is exactly 0 or NA due to symbolic math breakdowns 
# (e.g., division by row2_sum = 0), the likelihood becomes invalid
# triggering that dreaded “Invalid parent values” error.
# max(max(...), ε) acts like a soft-clipping threshold to guarantee numerical safety.

# ---------- p[1,j] ---------- 

row1_sum = P[1,1] + P[1,2]

p[1,1] = max(max(P[1,1] / row1_sum, 0), 0.000001)
p[1,2] = max(max(P[1,2] / row1_sum, 0), 0.000001)
p[1,3] = max(max(P[1,3] / row1_sum, 0), 0.000001)
p[1,4] = max(max(P[1,4] / row1_sum, 0), 0.000001)

r[1,1:4] ~ dmulti(p[1,1:4], n[1])


# ---------- p[2,j] ---------- 

row2_sum = P[2,1] + P[2,2] + P[2,3] + P[2,4]

p[2,1] = max(max(P[2,1] / row2_sum, 0), 0.000001)
p[2,2] = max(max(P[2,2] / row2_sum, 0), 0.000001)
p[2,3] = max(max(P[2,3] / row2_sum, 0), 0.000001)
p[2,4] = max(max(P[2,4] / row2_sum, 0), 0.000001)

r[2,1:4] ~ dmulti(p[2,1:4], n[2])

# ---------- p[3,j] ---------- 
 
row3_sum = P[3,2] + P[3,3] + P[3,4]


p[3,1] = max(max(P[3,1] / row3_sum, 0), 0.000001)
p[3,2] = max(max(P[3,2] / row3_sum, 0), 0.000001)
p[3,3] = max(max(P[3,3] / row3_sum, 0), 0.000001)
p[3,4] = max(max(P[3,4] / row3_sum, 0), 0.000001)

r[3,1:4] ~ dmulti(p[3,1:4], n[3])


# ---------- p[4,j] ---------- 

for (j in 1:4) {
  p[4,j] = P[4,j]
 }
 r[4,1:4] ~ dmulti(p[4,1:4], n[4])


# Priors for transition rates

# Priors for state 1

q12 ~ dgamma(0.1, 0.1)
q13 ~ dgamma(0.1, 0.1)
q14 ~ dgamma(0.1, 0.1)

q11 = -(q12 + q13 + q14)

# Priors from state 2
q21 ~ dgamma(0.1, 0.1)
q23 ~ dgamma(0.1, 0.1)
q24 ~ dgamma(0.1, 0.1)

q22 = -(q21 + q23 + q24)

# Priors for state 3 

q31 ~ dgamma(0.1, 0.1)
q32 ~ dgamma(0.1, 0.1)
q34 ~ dgamma(0.1, 0.1)

q33 = -(q31 + q32 + q34)


# Priors for state 4
q41 ~ dgamma(0.1, 0.1)
q42 ~ dgamma(0.1, 0.1)
q43 ~ dgamma(0.1, 0.1)


}
"
writeLines(model_string, "4state_7_14_v2.bug")
```

## Run the JAGS Model


```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: TRUE
#| code-summary: "Show the code"
#| 
# Initialize model

r <- matrix(c(310,70,2,0,
                   96, 1683, 11, 13,
                   1, 11, 1, 0,
                   0, 0, 0, 94), nrow=4, byrow=TRUE)

n <- rowSums(r)


data_list <- list(
  r = r,
  n = n,
  u = 1)


 inits <- list(q11 = 0,
               q12 = 0.1,
               q13 = 0,
               q14 = 0,
               q21 = 0.1, 
               q22 = 0,
               q23 = 0.1, 
               q24 = 0.1, 
               q31 = 0,
               q32 = 0.1,
               q33 = 0,
               q34 = 0.1,
               q41 = 0,
               q42 = 0,
               q43 = 0,
               q44 = 0)




parameters.to.save <- c("q11", "q12", "q13", "q14", 
                       "q21", "q22","q23", "q24", 
                       "q31", "q32", "q33", "q34", 
                       "q41", "q42", "q43", "q44",
                       "P[1,1]", "P[1,2]", "P[1,3]", "P[1,4]",
                       "P[2,1]", "P[2,2]", "P[2,3]", "P[2,4]",
                       "P[3,1]", "P[3,2]", "P[3,3]", "P[3,4]",
                       "P[4,1]", "P[4,2]", "P[4,3]", "P[4,4]",
                       "p[1,1]", "p[1,2]", "p[1,3]", "p[1,4]",
                       "p[2,1]", "p[2,2]", "p[2,3]", "p[2,4]",
                       "p[3,1]", "p[3,2]", "p[3,3]", "p[3,4]",
                       "p[4,1]", "p[4,2]", "p[4,3]", "p[4,4]"
                       )

jags_model <- jags.model(file = "4state_7_14_v2.bug",
                         data = data_list,
                         n.chains = 3,
                         n.adapt = 100)
                         

# Burn-in
update(jags_model, 10000) #Discard these samples
``` 


## Fetch the Samples

This code uses the `coda.samples` function to draw samples from the JAGS model. The number of iterations is set to 5000, which can be adjusted based on convergence diagnostics and model complexity.
```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: TRUE
#| code-summary: "Show the code"


samples <- coda.samples(jags_model_7_10,
  variable.names = c(
    "q11", "q12", "q13", "q14", 
    "q21", "q22","q23", "q24", 
    "q31", "q32", "q33", "q34", 
    "q41", "q42", "q43", "q44",
    "P[1,1]", "P[1,2]", "P[1,3]", "P[1,4]", # cap P are the transition probabilities
    "P[2,1]", "P[2,2]", "P[2,3]", "P[2,4]",
    "P[3,1]", "P[3,2]", "P[3,3]", "P[3,4]",
    "P[4,1]", "P[4,2]", "P[4,3]", "P[4,4]",
    "p[1,1]", "p[1,2]", "p[1,3]", "p[1,4]", # small p are the normalized transition
    "p[2,1]", "p[2,2]", "p[2,3]", "p[2,4]", # probabilities use to stabilize the model
    "p[3,1]", "p[3,2]", "p[3,3]", "p[3,4]",
    "p[4,1]", "p[4,2]", "p[4,3]", "p[4,4]"
  ),
  n.iter = 50000,
  n.thin = 10
)


```

This code constructs, P, the matrix of transition probabilities. Prints out P and the row sums of P. Since P is a stochastic matrix, the row sums should be 1.
```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: true
#| code-summary: "Show the code"

states <- c("STW", "UTW", "X", "F")
smry <- summary(samples)
smry_df <- as.data.frame(smry[1])
names(smry_df) <- c("Mean", "SD", "Naive_SE", "Time_Series_SE")
P_rows <- smry_df[grep("^P\\[", rownames(smry_df)), ]

P <- matrix(P_rows[,1], nrow = 4, ncol = 4, byrow = TRUE)
colnames(P) <- states
rownames(P) <- states
P
rowsum_P <- rowSums(P)
names(rowsum_P) <- c("Row1", "Row2", "Row3", "Row4")
rowsum_P
```

This code constructs the Generator matrix for the Markov, which contains the process rates, q. Rows of the generator matrix should sum to 0.

```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: true
#| code-summary: "Show the code"

q_rows <- smry_df[grep("^q", rownames(smry_df)), ]
q <- matrix(q_rows[,1], nrow = 4, ncol = 4, byrow = TRUE)
colnames(q) <- states
rownames(q) <- states
q
cat("\n row sums:")
rowsum_q <- rowSums(q)
names(rowsum_q) <- c("Row1", "Row2", "Row3", "Row4")
rowsum_q
```

This code constructs the matrix p of normalized transition probabilities matrix. These were computed by `JAGS` as a check on the stabiliy of the model. P and p should agree fairly closely.

```{r}
#| message: FALSE
#| warning: FALSE
#| eval: FALSE
#| code-fold: true
#| code-summary: "Show the code"

p_rows <- smry_df[grep("^p\\[", rownames(smry_df)), ]
p <- matrix(P_rows[,1], nrow = 4, ncol = 4, byrow = TRUE)
colnames(p) <- states
rownames(p) <- states
p
rowsum_p <- rowSums(p)
names(rowsum_p) <- c("Row1", "Row2", "Row3", "Row4")
rowsum_p
```


This code sets up for plotting MCMC diagnostics. 
```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: true
#| code-summary: "Show the code"
# Convert JAGS samples to a data frame
samples_df <- as.data.frame(as.mcmc(do.call(rbind, samples)))


# Optional: print a few raw samples
cat("\n Transition Probabilities:\n")
round(head(samples_df[,1:16]),3)

cat("\n Process Rates:\n")
round(head(samples_df[,17:31]),3)
```


## Plots of MCMC Traces.
```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: TRUE
#| code-summary: "Show the code"
# Convert mcmc.list to data frame and add chain + iteration info
df_long <- do.call(rbind, lapply(1:length(samples), function(chain) {
  as.data.frame(samples[[chain]]) %>%
    mutate(
      iteration = row_number(),
      chain = factor(chain)
    )
})) %>%
  pivot_longer(cols = -c(iteration, chain), 
               names_to = "parameter", 
               values_to = "value")

```


### Trace Plots
```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: TRUE
#| code-summary: "Show the code"
ggplot(df_long %>% filter(parameter %in% c("P{1,1]", "P[1,2]", "P[1,3]", "P[1,4]", 
                                           "P[2,1]", "P[2,2]", "P[2,3]", "P[2,4]", 
                                           "P[3,1]", "P[3,2]", "P[3,3]", "P[3,4]")), 
       aes(x = iteration, y = value, color = parameter)) +
  geom_line(alpha = 0.6) +
  facet_wrap(~parameter, scales = "free_y") +
  labs(title = "Trace Plots", x = "Iteration", y = "Parameter Value") +
  theme_minimal()
```



### Plot Posterior distributions.
```{r}
#| message: FALSE
#| warning: FALSE
#| code-fold: true
#| code-summary: "Show the code"
ggplot(df_long %>% filter(parameter %in% c("P{1,1]", "P[1,2]", "P[1,3]", "P[1,4]", 
                                           "P[2,1]", "P[2,2]", "P[2,3]", "P[2,4]", 
                                           "P[3,1]", "P[3,2]", "P[3,3]", "P[3,4]")), 
       aes(x = value, fill = parameter)) +
  geom_density(alpha = 0.5) +
  facet_wrap(~parameter, scales = "free") +
  labs(title = "Posterior Densities", x = "Value", y = "Density") +
  theme_minimal()

```


## Model of the 4-state Markov process

```{r}
# ---------- P[1,1] ----------
P11 <- function(u=u, q11, q12, q13, q14,
                q21, q22, q23, q24,
                q31, q32, q33, q34,
                q41, q42, q43, q44) {



res <- term0_11 + term1_11 + term2_11 + term3_11 + term4_11
return(res)
}
```




```{r}
# ---------- P[1,2] ----------

P12 <- function(u=u, q11, q12, q13, q14,
                q21, q22, q23, q24,
                q31, q32, q33, q34,
                q41, q42, q43, q44)  {
t
return(res)
}
```

```{r}
# ---------- P[1,3] ----------
P13 <- function(u=u, q11, q12, q13, q14,
                q21, q22, q23, q24,
                q31, q32, q33, q34,
                q41, q42, q43, q44)  {


#
term4_13 <- (1/4) * (inner4a_13 + inner4b_13)

res <- term2_13 + term3_13 + term4_13

return(res)
}
```

```{r}
# ---------- P[1,4] ----------
P14 <- function(u=u, q11, q12, q13, q14,
                q21, q22, q23, q24,
                q31, q32, q33, q34,
                q41, q42, q43, q44)  {




return(res)
}

```

```{r}
# ---------- P[2,1] ----------

P21 <- function(u=u, q11, q12, q13, q14,
                q21, q22, q23, q24,
                q31, q32, q33, q34,
                q41, q42, q43, q44)  {
# First-order term

return(res)
}
```


```{r}
# ---------- P[2,2] ----------
P22 <- function(u=u, q11, q12, q13, q14,
                q21, q22, q23, q24,
                q31, q32, q33, q34,
                q41, q42, q43, q44)  {

return(res)
}
```

```{r}
P23 <- function(u=u, q11, q12, q13, q14,
                q21, q22, q23, q24,
                q31, q32, q33, q34,
                q41, q42, q43, q44)  {


res <- term1_23 + term2_23 + term3_23 + term4_23 + term5_23
return(res)
}
```

```{r}
# ---------- P[2,4] ----------
P24 <- function(u=u, q11, q12, q13, q14,
                q21, q22, q23, q24,
                q31, q32, q33, q34,
                q41, q42, q43, q44)  {
# First-order term

return(res)
}
```

```{r}
# ---------- P[3,1] ----------
P31 <- function(u=u, q11, q12, q13, q14,
                q21, q22, q23, q24,
                q31, q32, q33, q34,
                q41, q42, q43, q44)  {


return(res)
}
```

```{r}
# ---------- P[3,2] ----------
P32 <- function(u=u, q11, q12, q13, q14,
                q21, q22, q23, q24,
                q31, q32, q33, q34,
                q41, q42, q43, q44)  {

return(res)
}
```

```{r}
# ---------- P[3,3] ----------
P33 <- function(u=u, q11, q12, q13, q14,
                q21, q22, q23, q24,
                q31, q32, q33, q34,
                q41, q42, q43, q44)  {
# Zeroth-order term
t
return(res)
}
```

```{r}
# ---------- P[3,4] ----------

return(res)
}

```


## END FUNCTIONS


```{r}
# Create a vector of time values
u_seq <- seq(0, 5, by = 0.05)  # adjust range and step size as needed

# Create named parameter list from q matrix
q_args <- list(
  q11 = q[1,1], q12 = q[1,2], q13 = q[1,3], q14 = q[1,4],
  q21 = q[2,1], q22 = q[2,2], q23 = q[2,3], q24 = q[2,4],
  q31 = q[3,1], q32 = q[3,2], q33 = q[3,3], q34 = q[3,4],
  q41 = q[4,1], q42 = q[4,2], q43 = q[4,3], q44 = q[4,4]
)

# Evaluate P[1,1] at each time point
P11_values <- sapply(u_seq, function(u_val) {
  do.call(P11, c(list(u = u_val), q_args))
})

```

```{r}
plot(u_seq, P11_values, type = "l", lwd = 2, col = "darkblue",
     xlab = "Time (u)", ylab = "P[1,1](u)",
     main = "Symbolic P[1,1](u) over Time")

```


```{r}

# Evaluate P[1,1] at each time point
P12_values <- sapply(u_seq, function(u_val) {
  do.call(P12, c(list(u = u_val), q_args))
})

plot(u_seq, P12_values, type = "l", lwd = 2, col = "darkblue",
     xlab = "Time (u)", ylab = "P[1,2](u)",
     main = "Symbolic P[1,2](u) over Time")
```


```{r}
P_matrix <- function(u, q) {
  # Unpack q_ij from q matrix
  q_args <- list(
    q11 = q[1,1], q12 = q[1,2], q13 = q[1,3], q14 = q[1,4],
    q21 = q[2,1], q22 = q[2,2], q23 = q[2,3], q24 = q[2,4],
    q31 = q[3,1], q32 = q[3,2], q33 = q[3,3], q34 = q[3,4],
    q41 = q[4,1], q42 = q[4,2], q43 = q[4,3], q44 = q[4,4]
  )

  # Build matrix of symbolic P[i,j](u) values
  P <- matrix(NA, nrow = 4, ncol = 4)
  for (i in 1:4) {
    for (j in 1:4) {
      # Construct function name like P23, P14, etc.
      f_name <- paste0("P", i, j)
      if (exists(f_name)) {
        f <- get(f_name)
        P[i,j] <- do.call(f, c(list(u = u), q_args))
      }
    }
  }
  return(P)
}

u_seq <- seq(0, 5, by = 0.05)  # or customize range/step
P_evolution <- lapply(u_seq, function(u) P_matrix(u, q))


mat <- do.call(rbind, lapply(P_evolution, function(P) P[1, ]))
matplot(u_seq, mat, type = "l", lty = 1, lwd = 2,
        col = c("blue", "orange", "forestgreen", "red"),
        xlab = "Time (u)", ylab = "P[1,j](u)",
        main = "Evolution of State 1 Transitions Over Time")
legend("topright", legend = paste("P[1,", 1:4, "]", sep = ""), col = c("blue", "orange", "forestgreen", "red"), lwd = 2)

```


```{r}
library(ggplot2)

# Define time sequence
u_seq <- seq(0, 50, by = 0.5)

# Create q argument list from posterior mean matrix 'q'
q_args <- list(
  q11 = q[1,1], q12 = q[1,2], q13 = q[1,3], q14 = q[1,4],
  q21 = q[2,1], q22 = q[2,2], q23 = q[2,3], q24 = q[2,4],
  q31 = q[3,1], q32 = q[3,2], q33 = q[3,3], q34 = q[3,4],
  q41 = q[4,1], q42 = q[4,2], q43 = q[4,3], q44 = q[4,4]
)

# Initialize tidy data container
df <- data.frame()

# For each row and column (first 3 rows only)
for (i in 1:3) {
  for (j in 1:4) {
    f_name <- paste0("P", i, j)
    if (exists(f_name)) {
      f <- get(f_name)
      values <- sapply(u_seq, function(u) do.call(f, c(list(u = u), q_args)))
      df <- rbind(df, data.frame(
        Time = u_seq,
        Probability = values,
        Row = paste0("State ", i),
        Transition = paste0("P[", i, ",", j, "]")
      ))
    }
  }
}

```

```{r}
ggplot(df, aes(x = Time, y = Probability, color = Transition)) +
  geom_line(size = 1.1) +
  facet_wrap(~ Row, ncol = 1, scales = "free_y") +
  labs(title = "Evolution of Transition Probabilities Over Time",
       subtitle = "Symbolic CTMC approximation using posterior mean λ values",
       x = "Time (u)", y = "P[i,j](u)")

```

```{r}
library(ggplot2)

# Time sequence
u_seq <- seq(0, 20, by = 0.5)

# Posterior mean transition rates from q matrix
q_args <- list(
  q11 = q[1,1], q12 = q[1,2], q13 = q[1,3], q14 = q[1,4],
  q21 = q[2,1], q22 = q[2,2], q23 = q[2,3], q24 = q[2,4],
  q31 = q[3,1], q32 = q[3,2], q33 = q[3,3], q34 = q[3,4],
  q41 = q[4,1], q42 = q[4,2], q43 = q[4,3], q44 = q[4,4]
)

# Initialize data frame
df <- data.frame()

# Loop over i = 1:3, j = 1:4
for (i in 1:3) {
  for (j in 1:4) {
    f_name <- paste0("P", i, j)
    if (exists(f_name)) {
      f <- get(f_name)
      P_vals <- sapply(u_seq, function(u) do.call(f, c(list(u = u), q_args)))
      df <- rbind(df, data.frame(
        Time = u_seq,
        Probability = P_vals,
        Transition = paste0("P[", i, ",", j, "]")
      ))
    }
  }
}

```

```{r}
ggplot(df, aes(x = Time, y = Probability)) +
  geom_line(color = "steelblue", linewidth = 1) +
  facet_wrap(~ Transition, ncol = 4) +
  theme_minimal(base_size = 14) +
  scale_y_continuous(limits = c(-1, 2)) +  # <-- fix y-axis range here
  labs(title = "Evolution of Transition Probabilities P[i,j](u)",
       subtitle = "Symbolic evaluation using posterior mean λ values",
       x = "Time (u)", y = "Probability")


```

### normalized probabilities

```{r}
normalize_row <- function(P_row, epsilon = 1e-6) {
  row_sum <- sum(P_row, na.rm = TRUE)
  p <- pmax(P_row / row_sum, epsilon)
  p / sum(p)  # Renormalize in case clipping changed row sum
}

u_seq <- seq(0, 20, by = 0.5)
df_norm <- data.frame()

for (u in u_seq) {
  P_raw <- P_matrix(u, q)
  for (i in 1:3) {
    p_row <- normalize_row(P_raw[i, ])
    for (j in 1:4) {
      df_norm <- rbind(df_norm, data.frame(
        Time = u,
        Probability = p_row[j],
        Transition = paste0("P[", i, ",", j, "]")
      ))
    }
  }
}
library(ggplot2)

ggplot(df_norm, aes(x = Time, y = Probability)) +
  geom_line(color = "darkorange", linewidth = 1) +
  facet_wrap(~ Transition, ncol = 4) +
  scale_y_continuous(limits = c(0, 1)) +
  theme_minimal(base_size = 14) +
  labs(title = "Normalized Transition Probabilities P[i,j](u)",
       subtitle = "Symbolic Taylor expansion with row-wise normalization",
       x = "Time (u)", y = "Probability")


```

## JAGS Parameters

* The `n.iter` parameter specifies the total number of iterations to run, including both adaptation and burn-in phases.

* The `n.adapt` parameter specifies the number of iterations to use for the adaptation phase. This is an initial sampling phase during which the sampler adapts its behavior to maximize its efficiency (e.g. a Metropolis-Hastings random walk algorithm may change its step size). The sequence of samples generated during this adaptive phase is not a Markov chain, and therefore may not be used for posterior inference on the model.

* `update()` function to discard samples before the main sampling phase. This provides manual control before sampling. `Rjags()` does not use `update()`. Insteadit uses the `n.burnin` parameter to discard the first `n.burnin` samples during the sampling process.

* `n.thin` specifies the thinning interval. This means that every `n.thin`-th sample will be kept, while the others will be discarded. This is useful for reducing autocorrelation in the samples and managing memory usage.

## Model Logic

### Conceptual Linkage: From Parameters to Data

How does `JAGS`jags associates the parameters q11, q12, etc. with the data matrix r?

The q parameters (q12, q21, etc.) define the transition rate between states in the continuous-time Markov Chain (CTMC). These rates are plugged into the symbolic expressions to compute transition probabilities over a fixed time u, yielding P[i,j](u).

JAGS uses those probabilities to model the observed counts in r via a multinomial likelihood: 
r[i, 1:4] ~ dmulti(P[i, 1:4], n[i]). So essentially, each observed row r[i, ] represents the outcome of multinomial sampling, where each probability P[i,j](u) is indirectly shaped by the corresponding q_ij.

#### Internal Mechanics of Association in JAGS
Let’s break down what JAGS sees under the hood:

| Component |	Role in Linking Data to Parameters |
| --------- | ---------------------------------- |
| q_ij |	Model parameters sampled from priors (e.g., dgamma) |
| Symbolic expressions |	Use q_ij and u to compute P[i,j] |
| P[i,j] | Probabilities for transitioning from state i to j |
| r[i,1:4] |	Observed counts used in the likelihood |
| n[i]	| Total transitions from state i (sum of r[i,]) |

`JAGS` makes this linkage: → q_ij → used in computing P[i,j](u) → used in dmulti(P[i, ], n[i]) → compared against r[i, ] during inference. During sampling, JAGS tweaks the values of q_ij to make the resulting P[i,j] better match the observed data r.


### How does rjags estimates P[i,j] indirectly via p[i,j]

Row Normalization: The model computes row_sum[i] <- sum(P[i,1:4]) and normalizes i.e:p[i,j] <- max(P[i,j] / row_sum[i], 0.000001) These p[i,j] values are guaranteed to be non-negative and sum close to one, making them valid inputs for the dmulti(...) likelihood.

Likelihood Inference: JAGS uses the observed data r[i,] and total n[i] to shape the posterior: r[i,1:4] ~ dmulti(p[i,1:4], n[i]). Now here's the key: JAGS samples values of q_ij to maximize the likelihood that the observed counts r[i,j] would result from the multinomial defined by p[i,j].

Backpropagation: Every sampled q_ij set passes through the symbolic expressions to recompute P[i,j], which are then normalized to p[i,j]. So while the likelihood is computed on p, it implicitly constrains q_ij and P[i,j] to values that make p match the observed data well.

This strategy works well because the symbolic expressions are smooth and deterministic filtering out instability (via max(..., 0.000001)). The posterior for q_ij is shaped to yield P[i,j] expressions that produce plausible multinomial distributions.

The estimation of P[i,j] is not direct. It is embedded inside the computational graph that links q_ij → P[i,j] → p[i,j] → likelihood.
