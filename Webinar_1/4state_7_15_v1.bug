
model {

# ---- Row 1 ------
P[1,1] = 0.17967208021580522exp(-0.38984816587505294u) + 0.6982217634386337exp(-0.018051314778118315u) + 0.12210615634556096exp(-0.14210051934682866u)

P[1,2] = -0.26038811454753275exp(-0.38984816587505294u) + 0.28609177753549864exp(-0.018051314778118315u) - 0.025703662987965916exp(-0.14210051934682866u)

P[1,3] = 0.054281864861785115exp(-0.38984816587505294u) + 0.10841024185061544exp(-0.018051314778118315u) - 0.16269210671240056exp(-0.14210051934682866u)

P[1,4] = 0.9999999999999991 + 0.026434169469942467exp(-0.38984816587505294u) - 1.092723782824747exp(-0.018051314778118315u) + 0.06628961335480547exp(-0.14210051934682866u)


# ---- Row 2 ------
P[2,1] = -0.5207762290950655exp(-0.38984816587505294u) + 0.5721835550709974exp(-0.018051314778118315u) - 0.05140732597593192exp(-0.14210051934682866u)

P[2,2] = 0.7547301741726559exp(-0.38984816587505294u) + 0.2344484502182518exp(-0.018051314778118315u) + 0.010821375609092267exp(-0.14210051934682866u)

P[2,3] = -0.15733498970465906exp(-0.38984816587505294u) + 0.08884076784244149exp(-0.018051314778118315u) + 0.06849422186221757exp(-0.14210051934682866u)

P[2,4] = 0.9999999999999993 - 0.07661895537293148exp(-0.38984816587505294u) - 0.89547277313169exp(-0.018051314778118315u) - 0.027908271495377893exp(-0.14210051934682866u)

# ---- Row 3 ------
P[3,1] = 0.21712745944714032exp(-0.38984816587505294u) + 0.433640967402462exp(-0.018051314778118315u) - 0.6507684268496022exp(-0.14210051934682866u)

P[3,2] = -0.3146699794093179exp(-0.38984816587505294u) + 0.17768153568488304exp(-0.018051314778118315u) + 0.1369884437244349exp(-0.14210051934682866u)

P[3,3] = 0.06559774561153889exp(-0.38984816587505294u) + 0.06732978634311436exp(-0.018051314778118315u) + 0.8670724680453468exp(-0.14210051934682866u)

P[3,4] = 0.9999999999999992 + 0.031944774350638784exp(-0.38984816587505294u) - 0.6786522894304589exp(-0.018051314778118315u) - 0.3532924849201793exp(-0.14210051934682866u)

# ---- Row 4 ------

P[4,1] = 0.0
P[4,2] = 0.0
P[4,3] = 0.0
P[4,4] = 1.0


# Normalized transition probabilities are used to stabilize the model
# If p[1,j] is exactly 0 or NA due to symbolic math breakdowns 
# (e.g., division by row2_sum = 0), the likelihood becomes invalid
# triggering that dreaded “Invalid parent values” error.
# max(max(...), ε) acts like a soft-clipping threshold to guarantee numerical safety.

# ---------- p[1,j] ---------- 

row1_sum = P[1,1] + P[1,2]

p[1,1] = max(max(P[1,1] / row1_sum, 0), 0.000001)
p[1,2] = max(max(P[1,2] / row1_sum, 0), 0.000001)
p[1,3] = max(max(P[1,3] / row1_sum, 0), 0.000001)
p[1,4] = max(max(P[1,4] / row1_sum, 0), 0.000001)

r[1,1:4] ~ dmulti(p[1,1:4], n[1])


# ---------- p[2,j] ---------- 

row2_sum = P[2,1] + P[2,2] + P[2,3] + P[2,4]

p[2,1] = max(max(P[2,1] / row2_sum, 0), 0.000001)
p[2,2] = max(max(P[2,2] / row2_sum, 0), 0.000001)
p[2,3] = max(max(P[2,3] / row2_sum, 0), 0.000001)
p[2,4] = max(max(P[2,4] / row2_sum, 0), 0.000001)

r[2,1:4] ~ dmulti(p[2,1:4], n[2])

# ---------- p[3,j] ---------- 
 
row3_sum = P[3,2] + P[3,3] + P[3,4]


p[3,1] = max(max(P[3,1] / row3_sum, 0), 0.000001)
p[3,2] = max(max(P[3,2] / row3_sum, 0), 0.000001)
p[3,3] = max(max(P[3,3] / row3_sum, 0), 0.000001)
p[3,4] = max(max(P[3,4] / row3_sum, 0), 0.000001)

r[3,1:4] ~ dmulti(p[3,1:4], n[3])


# ---------- p[4,j] ---------- 

for (j in 1:4) {
  p[4,j] = P[4,j]
 }
 r[4,1:4] ~ dmulti(p[4,1:4], n[4])


# Priors for transition rates

# Priors for state 1

q12 ~ dgamma(0.1, 0.1)
q13 ~ dgamma(0.1, 0.1)
q14 ~ dgamma(0.1, 0.1)

q11 = -(q12 + q13 + q14)

# Priors from state 2
q21 ~ dgamma(0.1, 0.1)
q23 ~ dgamma(0.1, 0.1)
q24 ~ dgamma(0.1, 0.1)

q22 = -(q21 + q23 + q24)

# Priors for state 3 

q31 ~ dgamma(0.1, 0.1)
q32 ~ dgamma(0.1, 0.1)
q34 ~ dgamma(0.1, 0.1)

q33 = -(q31 + q32 + q34)


# Priors for state 4
q41 ~ dgamma(0.1, 0.1)
q42 ~ dgamma(0.1, 0.1)
q43 ~ dgamma(0.1, 0.1)


}

