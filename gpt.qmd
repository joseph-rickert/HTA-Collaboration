---
title: "gpt"
format: html
---


### Generator Matrix
$$
Q = \begin{bmatrix}
-(q_{12} + q_{13}) & q_{12} & q_{13} \\
q_{21} & -(q_{21} + q_{23}) & q_{23} \\
0 & 0 & 0
\end{bmatrix}
$$

### Eigenvalues of Transient submatrix
$$
\begin{aligned}
\alpha &= q_{12} + q_{13} \\
\beta &= q_{21} + q_{23} \\
\Delta &= \sqrt{(\alpha - \beta)^2 + 4 q_{12} q_{21}} \\
\lambda_1 &= \frac{-(\alpha + \beta) + \Delta}{2} \\
\lambda_2 &= \frac{-(\alpha + \beta) - \Delta}{2}
\end{aligned}
$$


### Transition Probabilities from state 1


$$
\begin{aligned}
P_{1,1}(t) &= \left( \frac{\lambda_1 + \alpha}{\lambda_1 - \lambda_2} \right) e^{\lambda_2 t}
           + \left( \frac{\lambda_2 + \alpha}{\lambda_2 - \lambda_1} \right) e^{\lambda_1 t} \\
P_{1,2}(t) &= \left( \frac{q_{12}}{\lambda_1 - \lambda_2} \right) \left( e^{\lambda_1 t} - e^{\lambda_2 t} \right) \\
P_{1,3}(t) &= 1 - P_{1,1}(t) - P_{1,2}(t)
\end{aligned}
$$


### Transition Probabilities from state 2



$$
\begin{aligned}
P_{2,1}(t) &= \left( \frac{q_{21}}{\lambda_1 - \lambda_2} \right) \left( e^{\lambda_1 t} - e^{\lambda_2 t} \right) \\
P_{2,2}(t) &= \left( \frac{\lambda_1 + \beta}{\lambda_1 - \lambda_2} \right) e^{\lambda_2 t}
           + \left( \frac{\lambda_2 + \beta}{\lambda_2 - \lambda_1} \right) e^{\lambda_1 t} \\
P_{2,3}(t) &= 1 - P_{2,1}(t) - P_{2,2}(t)
\end{aligned}
$$


### Transition Probabilities from state 3



$$
P_{3,1}(t) = 0, \quad
P_{3,2}(t) = 0, \quad
P_{3,3}(t) = 1
$$


### Final Transition matrix P[t]



$$
P(t) =
\begin{bmatrix}
P_{1,1}(t) & P_{1,2}(t) & P_{1,3}(t) \\
P_{2,1}(t) & P_{2,2}(t) & P_{2,3}(t) \\
0          & 0          & 1
\end{bmatrix}
$$


### Helper functions
```{r}
# Define helper quantities
alpha <- function(q12, q13) q12 + q13
beta  <- function(q21, q23) q21 + q23
Delta <- function(q12, q21, alpha, beta) sqrt((alpha - beta)^2 + 4 * q12 * q21)

lambda1 <- function(alpha, beta, Delta) (- (alpha + beta) + Delta) / 2
lambda2 <- function(alpha, beta, Delta) (- (alpha + beta) - Delta) / 2

```


```{r}
P11 <- function(t, q12, q13, q21, q23) {
  a <- alpha(q12, q13)
  b <- beta(q21, q23)
  d <- Delta(q12, q21, a, b)
  l1 <- lambda1(a, b, d)
  l2 <- lambda2(a, b, d)
  
  term1 <- ((l1 + a) / (l1 - l2)) * exp(l2 * t)
  term2 <- ((l2 + a) / (l2 - l1)) * exp(l1 * t)
  term1 + term2
}

P12 <- function(t, q12, q13, q21, q23) {
  a <- alpha(q12, q13)
  b <- beta(q21, q23)
  d <- Delta(q12, q21, a, b)
  l1 <- lambda1(a, b, d)
  l2 <- lambda2(a, b, d)
  
  (q12 / (l1 - l2)) * (exp(l1 * t) - exp(l2 * t))
}

P13 <- function(t, q12, q13, q21, q23) {
  1 - P11(t, q12, q13, q21, q23) - P12(t, q12, q13, q21, q23)
}


P21 <- function(t, q12, q13, q21, q23) {
  a <- alpha(q12, q13)
  b <- beta(q21, q23)
  d <- Delta(q12, q21, a, b)
  l1 <- lambda1(a, b, d)
  l2 <- lambda2(a, b, d)
  
  (q21 / (l1 - l2)) * (exp(l1 * t) - exp(l2 * t))
}

P22 <- function(t, q12, q13, q21, q23) {
  a <- alpha(q12, q13)
  b <- beta(q21, q23)
  d <- Delta(q12, q21, a, b)
  l1 <- lambda1(a, b, d)
  l2 <- lambda2(a, b, d)
  
  term1 <- ((l1 + b) / (l1 - l2)) * exp(l2 * t)
  term2 <- ((l2 + b) / (l2 - l1)) * exp(l1 * t)
  term1 + term2
}

P23 <- function(t, q12, q13, q21, q23) {
  1 - P21(t, q12, q13, q21, q23) - P22(t, q12, q13, q21, q23)
}

P31 <- function(t) 0
P32 <- function(t) 0
P33 <- function(t) 1

```

### Optional Transition Matrix constructor

```{r}
P_matrix <- function(t, q12, q13, q21, q23) {
  matrix(c(
    P11(t, q12, q13, q21, q23), P12(t, q12, q13, q21, q23), P13(t, q12, q13, q21, q23),
    P21(t, q12, q13, q21, q23), P22(t, q12, q13, q21, q23), P23(t, q12, q13, q21, q23),
    P31(t),                     P32(t),                     P33(t)
  ), nrow = 3, byrow = TRUE)
}

```

## JAGS MODEL

To estimate the transition rates qij
of a 3-state continuous-time Markov chain with state 3 absorbing, using JAGS and a state table of aggregated transitions, we’ll build a model that:

Treats the observed transitions as arising from a multinomial likelihood.

Uses the analytical solution for the transition probabilities 
𝑃𝑖,𝑗(𝑡)
 as functions of the rates and time.

Estimates the rates 𝑞𝑖𝑗via Bayesian inference.

Assumptions
You have a state table: counts of transitions from each state i to each state j, aggregated over a fixed time interval t


You know the time interval t over which transitions were observed.

State 3 is absorbing: no transitions out.

You can replace dgamma(1,1) with more informative priors if needed.

This model assumes transitions are observed over a fixed time t if you have varying times, you’ll need to index t per observation.

The matrix P is computed analytically inside JAGS using the closed-form solutions.

```{r}
model {
  # Likelihood: observed transitions from each state i to j
  for (i in 1:3) {
    transitions[i, 1:3] ~ dmulti(P[i, 1:3], n[i])
  }

  # Generator matrix Q
  # Off-diagonal priors
  Q[1,2] ~ dgamma(1, 1)
  Q[1,3] ~ dgamma(1, 1)
  Q[2,1] ~ dgamma(1, 1)
  Q[2,3] ~ dgamma(1, 1)

  # Diagonal entries: row sums must be zero
  Q[1,1] <- - (Q[1,2] + Q[1,3])
  Q[2,2] <- - (Q[2,1] + Q[2,3])

  # Absorbing state
  Q[3,1] <- 0
  Q[3,2] <- 0
  Q[3,3] <- 0

  # Shorthand for symbolic expressions
  alpha <- Q[1,2] + Q[1,3]
  beta  <- Q[2,1] + Q[2,3]
  delta <- sqrt((alpha - beta)^2 + 4 * Q[1,2] * Q[2,1])

  lambda1 <- (- (alpha + beta) + delta) / 2
  lambda2 <- (- (alpha + beta) - delta) / 2

  # Transition probabilities from state 1
  P[1,1] <- ((lambda1 + alpha) / (lambda1 - lambda2)) * exp(lambda2 * t) +
            ((lambda2 + alpha) / (lambda2 - lambda1)) * exp(lambda1 * t)

  P[1,2] <- (Q[1,2] / (lambda1 - lambda2)) * (exp(lambda1 * t) - exp(lambda2 * t))
  P[1,3] <- 1 - P[1,1] - P[1,2]

  # Transition probabilities from state 2
  P[2,1] <- (Q[2,1] / (lambda1 - lambda2)) * (exp(lambda1 * t) - exp(lambda2 * t))

  P[2,2] <- ((lambda1 + beta) / (lambda1 - lambda2)) * exp(lambda2 * t) +
            ((lambda2 + beta) / (lambda2 - lambda1)) * exp(lambda1 * t)

  P[2,3] <- 1 - P[2,1] - P[2,2]

  # Absorbing state
  P[3,1] <- 0
  P[3,2] <- 0
  P[3,3] <- 1
}

```


